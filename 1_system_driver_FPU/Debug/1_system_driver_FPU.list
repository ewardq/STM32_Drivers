
1_system_driver_FPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000017c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000340  08000348  00001348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000340  08000340  00001348  2**0
                  CONTENTS
  4 .ARM          00000000  08000340  08000340  00001348  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000340  08000348  00001348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000340  08000340  00001340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000344  08000344  00001344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000348  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000348  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003d6  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001bc  00000000  00000000  0000174e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00001910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003f  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb68  00000000  00000000  000019b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b8b  00000000  00000000  0002151f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af0b3  00000000  00000000  000220aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d115d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000008c  00000000  00000000  000d11a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000d122c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000328 	.word	0x08000328

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000328 	.word	0x08000328

08000204 <fpu_enable>:
 *      Author: Katja
 */
#include "stm32f4xx.h"
#include "fpu.h"

void fpu_enable(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/* Enable floating point unit: Enable CP10 and CP11 full access*/
	SCB->CPACR |= (1<<20); // Set only bit 20 to ONE
 8000208:	4b12      	ldr	r3, [pc, #72]	@ (8000254 <fpu_enable+0x50>)
 800020a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800020e:	4a11      	ldr	r2, [pc, #68]	@ (8000254 <fpu_enable+0x50>)
 8000210:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<21); // Set only bit 21 to ONE
 8000218:	4b0e      	ldr	r3, [pc, #56]	@ (8000254 <fpu_enable+0x50>)
 800021a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800021e:	4a0d      	ldr	r2, [pc, #52]	@ (8000254 <fpu_enable+0x50>)
 8000220:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000224:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<22); // Set only bit 22 to ONE
 8000228:	4b0a      	ldr	r3, [pc, #40]	@ (8000254 <fpu_enable+0x50>)
 800022a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800022e:	4a09      	ldr	r2, [pc, #36]	@ (8000254 <fpu_enable+0x50>)
 8000230:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<23); // Set only bit 23 to ONE
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <fpu_enable+0x50>)
 800023a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800023e:	4a05      	ldr	r2, [pc, #20]	@ (8000254 <fpu_enable+0x50>)
 8000240:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <main>:
#define PIN5     (1U<<5)
#define LED_PIN  PIN5     // Give it another name so it's more readable


int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
    /* Enable FPU */
	fpu_enable();
 800025e:	f7ff ffd1 	bl	8000204 <fpu_enable>

	while(1){
		GPIOA->ODR ^= LED_PIN;
 8000262:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <main+0x2c>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	4a07      	ldr	r2, [pc, #28]	@ (8000284 <main+0x2c>)
 8000268:	f083 0320 	eor.w	r3, r3, #32
 800026c:	6153      	str	r3, [r2, #20]
		for(int i = 0; i < 100000; i++){}
 800026e:	2300      	movs	r3, #0
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	e002      	b.n	800027a <main+0x22>
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3301      	adds	r3, #1
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a02      	ldr	r2, [pc, #8]	@ (8000288 <main+0x30>)
 800027e:	4293      	cmp	r3, r2
 8000280:	ddf8      	ble.n	8000274 <main+0x1c>
		GPIOA->ODR ^= LED_PIN;
 8000282:	e7ee      	b.n	8000262 <main+0xa>
 8000284:	40020000 	.word	0x40020000
 8000288:	0001869f 	.word	0x0001869f

0800028c <Reset_Handler>:
 800028c:	480d      	ldr	r0, [pc, #52]	@ (80002c4 <LoopForever+0x2>)
 800028e:	4685      	mov	sp, r0
 8000290:	f3af 8000 	nop.w
 8000294:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <LoopForever+0x6>)
 8000296:	490d      	ldr	r1, [pc, #52]	@ (80002cc <LoopForever+0xa>)
 8000298:	4a0d      	ldr	r2, [pc, #52]	@ (80002d0 <LoopForever+0xe>)
 800029a:	2300      	movs	r3, #0
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:
 800029e:	58d4      	ldr	r4, [r2, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:
 80002a4:	18c4      	adds	r4, r0, r3
 80002a6:	428c      	cmp	r4, r1
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>
 80002aa:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <LoopForever+0x12>)
 80002ac:	4c0a      	ldr	r4, [pc, #40]	@ (80002d8 <LoopForever+0x16>)
 80002ae:	2300      	movs	r3, #0
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:
 80002b2:	6013      	str	r3, [r2, #0]
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:
 80002b6:	42a2      	cmp	r2, r4
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>
 80002ba:	f000 f811 	bl	80002e0 <__libc_init_array>
 80002be:	f7ff ffcb 	bl	8000258 <main>

080002c2 <LoopForever>:
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
 80002c4:	20020000 	.word	0x20020000
 80002c8:	20000000 	.word	0x20000000
 80002cc:	20000000 	.word	0x20000000
 80002d0:	08000348 	.word	0x08000348
 80002d4:	20000000 	.word	0x20000000
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC_IRQHandler>:
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <__libc_init_array>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000318 <__libc_init_array+0x38>)
 80002e4:	4c0d      	ldr	r4, [pc, #52]	@ (800031c <__libc_init_array+0x3c>)
 80002e6:	1b64      	subs	r4, r4, r5
 80002e8:	10a4      	asrs	r4, r4, #2
 80002ea:	2600      	movs	r6, #0
 80002ec:	42a6      	cmp	r6, r4
 80002ee:	d109      	bne.n	8000304 <__libc_init_array+0x24>
 80002f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000320 <__libc_init_array+0x40>)
 80002f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000324 <__libc_init_array+0x44>)
 80002f4:	f000 f818 	bl	8000328 <_init>
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	10a4      	asrs	r4, r4, #2
 80002fc:	2600      	movs	r6, #0
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d105      	bne.n	800030e <__libc_init_array+0x2e>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f855 3b04 	ldr.w	r3, [r5], #4
 8000308:	4798      	blx	r3
 800030a:	3601      	adds	r6, #1
 800030c:	e7ee      	b.n	80002ec <__libc_init_array+0xc>
 800030e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000312:	4798      	blx	r3
 8000314:	3601      	adds	r6, #1
 8000316:	e7f2      	b.n	80002fe <__libc_init_array+0x1e>
 8000318:	08000340 	.word	0x08000340
 800031c:	08000340 	.word	0x08000340
 8000320:	08000340 	.word	0x08000340
 8000324:	08000344 	.word	0x08000344

08000328 <_init>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr

08000334 <_fini>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr
