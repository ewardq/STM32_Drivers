
3_system_driver_timebase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001370  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001540  08001540  00002540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001588  08001588  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001588  08001588  00002588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001590  08001590  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001590  08001590  00002590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001594  08001594  00002594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001598  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000005c  080015f4  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080015f4  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000117b  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006ea  00000000  00000000  00004207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  000048f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000122  00000000  00000000  00004aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a6d  00000000  00000000  00004bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002744  00000000  00000000  00026637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4ea2  00000000  00000000  00028d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddc1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c84  00000000  00000000  000ddc60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000de8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001528 	.word	0x08001528

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001528 	.word	0x08001528

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <fpu_enable>:
 *      Author: Katja
 */
#include "stm32f4xx.h"
#include "fpu.h"

void fpu_enable(void){
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/* Enable floating point unit: Enable CP10 and CP11 full access*/
	SCB->CPACR |= (1<<20); // Set only bit 20 to ONE
 80002b4:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <fpu_enable+0x50>)
 80002b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002ba:	4a11      	ldr	r2, [pc, #68]	@ (8000300 <fpu_enable+0x50>)
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<21); // Set only bit 21 to ONE
 80002c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <fpu_enable+0x50>)
 80002c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000300 <fpu_enable+0x50>)
 80002cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<22); // Set only bit 22 to ONE
 80002d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000300 <fpu_enable+0x50>)
 80002d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002da:	4a09      	ldr	r2, [pc, #36]	@ (8000300 <fpu_enable+0x50>)
 80002dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<23); // Set only bit 23 to ONE
 80002e4:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <fpu_enable+0x50>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002ea:	4a05      	ldr	r2, [pc, #20]	@ (8000300 <fpu_enable+0x50>)
 80002ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
*/

int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
    /* Enable FPU */
	fpu_enable();
 8000308:	f7ff ffd2 	bl	80002b0 <fpu_enable>

	/* Initialize UART */
	debug_uart_init();
 800030c:	f000 f928 	bl	8000560 <debug_uart_init>

	/* Initialize timebase */
	timebase_init();
 8000310:	f000 f8f0 	bl	80004f4 <timebase_init>

	while(1){
		printf("Hello from STM32 \n\r");
 8000314:	4803      	ldr	r0, [pc, #12]	@ (8000324 <main+0x20>)
 8000316:	f000 fa99 	bl	800084c <iprintf>
		delay(1);
 800031a:	2001      	movs	r0, #1
 800031c:	f000 f8be 	bl	800049c <delay>
		printf("Hello from STM32 \n\r");
 8000320:	bf00      	nop
 8000322:	e7f7      	b.n	8000314 <main+0x10>
 8000324:	08001540 	.word	0x08001540

08000328 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	e00a      	b.n	8000350 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800033a:	f3af 8000 	nop.w
 800033e:	4601      	mov	r1, r0
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	1c5a      	adds	r2, r3, #1
 8000344:	60ba      	str	r2, [r7, #8]
 8000346:	b2ca      	uxtb	r2, r1
 8000348:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	3301      	adds	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbf0      	blt.n	800033a <_read+0x12>
  }

  return len;
 8000358:	687b      	ldr	r3, [r7, #4]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b086      	sub	sp, #24
 8000366:	af00      	add	r7, sp, #0
 8000368:	60f8      	str	r0, [r7, #12]
 800036a:	60b9      	str	r1, [r7, #8]
 800036c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
 8000372:	e009      	b.n	8000388 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f8e3 	bl	8000548 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	3301      	adds	r3, #1
 8000386:	617b      	str	r3, [r7, #20]
 8000388:	697a      	ldr	r2, [r7, #20]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	429a      	cmp	r2, r3
 800038e:	dbf1      	blt.n	8000374 <_write+0x12>
  }
  return len;
 8000390:	687b      	ldr	r3, [r7, #4]
}
 8000392:	4618      	mov	r0, r3
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <_close>:

int _close(int file)
{
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
 80003ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003c2:	605a      	str	r2, [r3, #4]
  return 0;
 80003c4:	2300      	movs	r3, #0
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <_isatty>:

int _isatty(int file)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003da:	2301      	movs	r3, #1
}
 80003dc:	4618      	mov	r0, r3
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003f4:	2300      	movs	r3, #0
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
	...

08000404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800040c:	4a14      	ldr	r2, [pc, #80]	@ (8000460 <_sbrk+0x5c>)
 800040e:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <_sbrk+0x60>)
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000418:	4b13      	ldr	r3, [pc, #76]	@ (8000468 <_sbrk+0x64>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d102      	bne.n	8000426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <_sbrk+0x64>)
 8000422:	4a12      	ldr	r2, [pc, #72]	@ (800046c <_sbrk+0x68>)
 8000424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000426:	4b10      	ldr	r3, [pc, #64]	@ (8000468 <_sbrk+0x64>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	693a      	ldr	r2, [r7, #16]
 8000430:	429a      	cmp	r2, r3
 8000432:	d207      	bcs.n	8000444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000434:	f000 faae 	bl	8000994 <__errno>
 8000438:	4603      	mov	r3, r0
 800043a:	220c      	movs	r2, #12
 800043c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800043e:	f04f 33ff 	mov.w	r3, #4294967295
 8000442:	e009      	b.n	8000458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <_sbrk+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800044a:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <_sbrk+0x64>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	4a05      	ldr	r2, [pc, #20]	@ (8000468 <_sbrk+0x64>)
 8000454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000456:	68fb      	ldr	r3, [r7, #12]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20020000 	.word	0x20020000
 8000464:	00000400 	.word	0x00000400
 8000468:	20000078 	.word	0x20000078
 800046c:	200001d0 	.word	0x200001d0

08000470 <get_tick>:
#define TICK_FREQ        1             // This is the incremental step. Increment by one

volatile uint32_t g_curr_tick;
volatile uint32_t g_curr_tick_p;

uint32_t get_tick(void){
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8000478:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <get_tick+0x24>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a06      	ldr	r2, [pc, #24]	@ (8000498 <get_tick+0x28>)
 800047e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000480:	b662      	cpsie	i
}
 8000482:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8000484:	4b04      	ldr	r3, [pc, #16]	@ (8000498 <get_tick+0x28>)
 8000486:	681b      	ldr	r3, [r3, #0]
}
 8000488:	4618      	mov	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	2000007c 	.word	0x2000007c
 8000498:	20000080 	.word	0x20000080

0800049c <delay>:

/* Delay in seconds */
void delay(uint32_t delay){
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = get_tick();
 80004a4:	f7ff ffe4 	bl	8000470 <get_tick>
 80004a8:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY){
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004b4:	d002      	beq.n	80004bc <delay+0x20>
		wait += (uint32_t)TICK_FREQ;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	3301      	adds	r3, #1
 80004ba:	60fb      	str	r3, [r7, #12]
	}

	while((get_tick() - tickstart) < wait){}
 80004bc:	bf00      	nop
 80004be:	f7ff ffd7 	bl	8000470 <get_tick>
 80004c2:	4602      	mov	r2, r0
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	1ad3      	subs	r3, r2, r3
 80004c8:	68fa      	ldr	r2, [r7, #12]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d8f7      	bhi.n	80004be <delay+0x22>
}
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <tick_increment>:

void tick_increment(void){
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 80004dc:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <tick_increment+0x18>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	4a03      	ldr	r2, [pc, #12]	@ (80004f0 <tick_increment+0x18>)
 80004e4:	6013      	str	r3, [r2, #0]
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	2000007c 	.word	0x2000007c

080004f4 <timebase_init>:

void timebase_init(void){
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
	/* Disable global interrupts */
	__disable_irq();

	/* Load the timer with number of clock cycles per second */
	SysTick->LOAD = ONE_SEC_LOAD - 1;    // Subtract one because the LOAD register counts from zero.
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <timebase_init+0x40>)
 80004fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <timebase_init+0x44>)
 8000500:	605a      	str	r2, [r3, #4]

	/* Clear SysTick current value register */
	SysTick->VAL = 0;
 8000502:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <timebase_init+0x40>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]

	/* Select internal clock source */
	SysTick->CTRL = CTRL_CLCKSRC;         // Set the register in it's entirety to 1
 8000508:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <timebase_init+0x40>)
 800050a:	2204      	movs	r2, #4
 800050c:	601a      	str	r2, [r3, #0]

	/* Enable interrupt */
	SysTick->CTRL |= CTRL_TICKINT;
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <timebase_init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <timebase_init+0x40>)
 8000514:	f043 0302 	orr.w	r3, r3, #2
 8000518:	6013      	str	r3, [r2, #0]

	/* Enable SysTick */
	SysTick->CTRL |= CTRL_ENABLE;
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <timebase_init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a05      	ldr	r2, [pc, #20]	@ (8000534 <timebase_init+0x40>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000526:	b662      	cpsie	i
}
 8000528:	bf00      	nop

	/* Enable global interrupts */
	__enable_irq();
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	e000e010 	.word	0xe000e010
 8000538:	00f423ff 	.word	0x00f423ff

0800053c <SysTick_Handler>:

void SysTick_Handler(void){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	tick_increment();            // Each time this function is called, the system knows that
 8000540:	f7ff ffca 	bl	80004d8 <tick_increment>
	                             // one second has passed
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <__io_putchar>:
#define SR_TXE             (1U<<7)

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f000 f84f 	bl	80005f4 <uart_write>
	return ch;
 8000556:	687b      	ldr	r3, [r7, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <debug_uart_init>:

void debug_uart_init(){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000564:	4b1f      	ldr	r3, [pc, #124]	@ (80005e4 <debug_uart_init+0x84>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000568:	4a1e      	ldr	r2, [pc, #120]	@ (80005e4 <debug_uart_init+0x84>)
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 8000570:	4b1d      	ldr	r3, [pc, #116]	@ (80005e8 <debug_uart_init+0x88>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a1c      	ldr	r2, [pc, #112]	@ (80005e8 <debug_uart_init+0x88>)
 8000576:	f023 0310 	bic.w	r3, r3, #16
 800057a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800057c:	4b1a      	ldr	r3, [pc, #104]	@ (80005e8 <debug_uart_init+0x88>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a19      	ldr	r2, [pc, #100]	@ (80005e8 <debug_uart_init+0x88>)
 8000582:	f043 0320 	orr.w	r3, r3, #32
 8000586:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7 (UART2_TX)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000588:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <debug_uart_init+0x88>)
 800058a:	6a1b      	ldr	r3, [r3, #32]
 800058c:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <debug_uart_init+0x88>)
 800058e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000592:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000594:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <debug_uart_init+0x88>)
 8000596:	6a1b      	ldr	r3, [r3, #32]
 8000598:	4a13      	ldr	r2, [pc, #76]	@ (80005e8 <debug_uart_init+0x88>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800059e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <debug_uart_init+0x88>)
 80005a2:	6a1b      	ldr	r3, [r3, #32]
 80005a4:	4a10      	ldr	r2, [pc, #64]	@ (80005e8 <debug_uart_init+0x88>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<11);
 80005ac:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <debug_uart_init+0x88>)
 80005ae:	6a1b      	ldr	r3, [r3, #32]
 80005b0:	4a0d      	ldr	r2, [pc, #52]	@ (80005e8 <debug_uart_init+0x88>)
 80005b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80005b6:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
	RCC->APB1ENR |= UART2EN;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <debug_uart_init+0x84>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <debug_uart_init+0x84>)
 80005be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure UART baudrate*/
	uart_set_baudrate(APB1_CLK, DBG_UART_BAUDRATE);
 80005c4:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80005c8:	4808      	ldr	r0, [pc, #32]	@ (80005ec <debug_uart_init+0x8c>)
 80005ca:	f000 f83f 	bl	800064c <uart_set_baudrate>

	/*Configure transfer direction*/
	USART2->CR1 = CR1_TE;
 80005ce:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <debug_uart_init+0x90>)
 80005d0:	2208      	movs	r2, #8
 80005d2:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
	USART2->CR1 |= CR1_UE;
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <debug_uart_init+0x90>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	4a05      	ldr	r2, [pc, #20]	@ (80005f0 <debug_uart_init+0x90>)
 80005da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005de:	60d3      	str	r3, [r2, #12]
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40020000 	.word	0x40020000
 80005ec:	00f42400 	.word	0x00f42400
 80005f0:	40004400 	.word	0x40004400

080005f4 <uart_write>:

static void uart_write(int ch){
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty */
	while(!(USART2->SR & SR_TXE)){}
 80005fc:	bf00      	nop
 80005fe:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <uart_write+0x2c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0f9      	beq.n	80005fe <uart_write+0xa>

	/*Write to transmit data register */
	USART2->DR = (ch & 0xFF);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <uart_write+0x2c>)
 800060e:	b2db      	uxtb	r3, r3
 8000610:	6053      	str	r3, [r2, #4]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40004400 	.word	0x40004400

08000624 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate){
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	085a      	lsrs	r2, r3, #1
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	441a      	add	r2, r3
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	fbb2 f3f3 	udiv	r3, r2, r3
 800063c:	b29b      	uxth	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 8000656:	6839      	ldr	r1, [r7, #0]
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ffe3 	bl	8000624 <compute_uart_bd>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <uart_set_baudrate+0x24>)
 8000664:	609a      	str	r2, [r3, #8]
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40004400 	.word	0x40004400

08000674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000674:	480d      	ldr	r0, [pc, #52]	@ (80006ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000676:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000678:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800067e:	490d      	ldr	r1, [pc, #52]	@ (80006b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000680:	4a0d      	ldr	r2, [pc, #52]	@ (80006b8 <LoopForever+0xe>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000684:	e002      	b.n	800068c <LoopCopyDataInit>

08000686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068a:	3304      	adds	r3, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800068c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000690:	d3f9      	bcc.n	8000686 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000692:	4a0a      	ldr	r2, [pc, #40]	@ (80006bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000694:	4c0a      	ldr	r4, [pc, #40]	@ (80006c0 <LoopForever+0x16>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000698:	e001      	b.n	800069e <LoopFillZerobss>

0800069a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069c:	3204      	adds	r2, #4

0800069e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a0:	d3fb      	bcc.n	800069a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006a2:	f000 f97d 	bl	80009a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fe2d 	bl	8000304 <main>

080006aa <LoopForever>:

LoopForever:
  b LoopForever
 80006aa:	e7fe      	b.n	80006aa <LoopForever>
  ldr   r0, =_estack
 80006ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006b8:	08001598 	.word	0x08001598
  ldr r2, =_sbss
 80006bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006c0:	200001d0 	.word	0x200001d0

080006c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC_IRQHandler>
	...

080006c8 <std>:
 80006c8:	2300      	movs	r3, #0
 80006ca:	b510      	push	{r4, lr}
 80006cc:	4604      	mov	r4, r0
 80006ce:	e9c0 3300 	strd	r3, r3, [r0]
 80006d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006d6:	6083      	str	r3, [r0, #8]
 80006d8:	8181      	strh	r1, [r0, #12]
 80006da:	6643      	str	r3, [r0, #100]	@ 0x64
 80006dc:	81c2      	strh	r2, [r0, #14]
 80006de:	6183      	str	r3, [r0, #24]
 80006e0:	4619      	mov	r1, r3
 80006e2:	2208      	movs	r2, #8
 80006e4:	305c      	adds	r0, #92	@ 0x5c
 80006e6:	f000 f906 	bl	80008f6 <memset>
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <std+0x58>)
 80006ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80006ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <std+0x5c>)
 80006f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <std+0x60>)
 80006f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <std+0x64>)
 80006f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <std+0x68>)
 80006fc:	6224      	str	r4, [r4, #32]
 80006fe:	429c      	cmp	r4, r3
 8000700:	d006      	beq.n	8000710 <std+0x48>
 8000702:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000706:	4294      	cmp	r4, r2
 8000708:	d002      	beq.n	8000710 <std+0x48>
 800070a:	33d0      	adds	r3, #208	@ 0xd0
 800070c:	429c      	cmp	r4, r3
 800070e:	d105      	bne.n	800071c <std+0x54>
 8000710:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000718:	f000 b966 	b.w	80009e8 <__retarget_lock_init_recursive>
 800071c:	bd10      	pop	{r4, pc}
 800071e:	bf00      	nop
 8000720:	08000871 	.word	0x08000871
 8000724:	08000893 	.word	0x08000893
 8000728:	080008cb 	.word	0x080008cb
 800072c:	080008ef 	.word	0x080008ef
 8000730:	20000084 	.word	0x20000084

08000734 <stdio_exit_handler>:
 8000734:	4a02      	ldr	r2, [pc, #8]	@ (8000740 <stdio_exit_handler+0xc>)
 8000736:	4903      	ldr	r1, [pc, #12]	@ (8000744 <stdio_exit_handler+0x10>)
 8000738:	4803      	ldr	r0, [pc, #12]	@ (8000748 <stdio_exit_handler+0x14>)
 800073a:	f000 b869 	b.w	8000810 <_fwalk_sglue>
 800073e:	bf00      	nop
 8000740:	20000000 	.word	0x20000000
 8000744:	08001289 	.word	0x08001289
 8000748:	20000010 	.word	0x20000010

0800074c <cleanup_stdio>:
 800074c:	6841      	ldr	r1, [r0, #4]
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <cleanup_stdio+0x34>)
 8000750:	4299      	cmp	r1, r3
 8000752:	b510      	push	{r4, lr}
 8000754:	4604      	mov	r4, r0
 8000756:	d001      	beq.n	800075c <cleanup_stdio+0x10>
 8000758:	f000 fd96 	bl	8001288 <_fflush_r>
 800075c:	68a1      	ldr	r1, [r4, #8]
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <cleanup_stdio+0x38>)
 8000760:	4299      	cmp	r1, r3
 8000762:	d002      	beq.n	800076a <cleanup_stdio+0x1e>
 8000764:	4620      	mov	r0, r4
 8000766:	f000 fd8f 	bl	8001288 <_fflush_r>
 800076a:	68e1      	ldr	r1, [r4, #12]
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <cleanup_stdio+0x3c>)
 800076e:	4299      	cmp	r1, r3
 8000770:	d004      	beq.n	800077c <cleanup_stdio+0x30>
 8000772:	4620      	mov	r0, r4
 8000774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000778:	f000 bd86 	b.w	8001288 <_fflush_r>
 800077c:	bd10      	pop	{r4, pc}
 800077e:	bf00      	nop
 8000780:	20000084 	.word	0x20000084
 8000784:	200000ec 	.word	0x200000ec
 8000788:	20000154 	.word	0x20000154

0800078c <global_stdio_init.part.0>:
 800078c:	b510      	push	{r4, lr}
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <global_stdio_init.part.0+0x30>)
 8000790:	4c0b      	ldr	r4, [pc, #44]	@ (80007c0 <global_stdio_init.part.0+0x34>)
 8000792:	4a0c      	ldr	r2, [pc, #48]	@ (80007c4 <global_stdio_init.part.0+0x38>)
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	4620      	mov	r0, r4
 8000798:	2200      	movs	r2, #0
 800079a:	2104      	movs	r1, #4
 800079c:	f7ff ff94 	bl	80006c8 <std>
 80007a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007a4:	2201      	movs	r2, #1
 80007a6:	2109      	movs	r1, #9
 80007a8:	f7ff ff8e 	bl	80006c8 <std>
 80007ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007b0:	2202      	movs	r2, #2
 80007b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b6:	2112      	movs	r1, #18
 80007b8:	f7ff bf86 	b.w	80006c8 <std>
 80007bc:	200001bc 	.word	0x200001bc
 80007c0:	20000084 	.word	0x20000084
 80007c4:	08000735 	.word	0x08000735

080007c8 <__sfp_lock_acquire>:
 80007c8:	4801      	ldr	r0, [pc, #4]	@ (80007d0 <__sfp_lock_acquire+0x8>)
 80007ca:	f000 b90e 	b.w	80009ea <__retarget_lock_acquire_recursive>
 80007ce:	bf00      	nop
 80007d0:	200001c5 	.word	0x200001c5

080007d4 <__sfp_lock_release>:
 80007d4:	4801      	ldr	r0, [pc, #4]	@ (80007dc <__sfp_lock_release+0x8>)
 80007d6:	f000 b909 	b.w	80009ec <__retarget_lock_release_recursive>
 80007da:	bf00      	nop
 80007dc:	200001c5 	.word	0x200001c5

080007e0 <__sinit>:
 80007e0:	b510      	push	{r4, lr}
 80007e2:	4604      	mov	r4, r0
 80007e4:	f7ff fff0 	bl	80007c8 <__sfp_lock_acquire>
 80007e8:	6a23      	ldr	r3, [r4, #32]
 80007ea:	b11b      	cbz	r3, 80007f4 <__sinit+0x14>
 80007ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f0:	f7ff bff0 	b.w	80007d4 <__sfp_lock_release>
 80007f4:	4b04      	ldr	r3, [pc, #16]	@ (8000808 <__sinit+0x28>)
 80007f6:	6223      	str	r3, [r4, #32]
 80007f8:	4b04      	ldr	r3, [pc, #16]	@ (800080c <__sinit+0x2c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1f5      	bne.n	80007ec <__sinit+0xc>
 8000800:	f7ff ffc4 	bl	800078c <global_stdio_init.part.0>
 8000804:	e7f2      	b.n	80007ec <__sinit+0xc>
 8000806:	bf00      	nop
 8000808:	0800074d 	.word	0x0800074d
 800080c:	200001bc 	.word	0x200001bc

08000810 <_fwalk_sglue>:
 8000810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000814:	4607      	mov	r7, r0
 8000816:	4688      	mov	r8, r1
 8000818:	4614      	mov	r4, r2
 800081a:	2600      	movs	r6, #0
 800081c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000820:	f1b9 0901 	subs.w	r9, r9, #1
 8000824:	d505      	bpl.n	8000832 <_fwalk_sglue+0x22>
 8000826:	6824      	ldr	r4, [r4, #0]
 8000828:	2c00      	cmp	r4, #0
 800082a:	d1f7      	bne.n	800081c <_fwalk_sglue+0xc>
 800082c:	4630      	mov	r0, r6
 800082e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000832:	89ab      	ldrh	r3, [r5, #12]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d907      	bls.n	8000848 <_fwalk_sglue+0x38>
 8000838:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800083c:	3301      	adds	r3, #1
 800083e:	d003      	beq.n	8000848 <_fwalk_sglue+0x38>
 8000840:	4629      	mov	r1, r5
 8000842:	4638      	mov	r0, r7
 8000844:	47c0      	blx	r8
 8000846:	4306      	orrs	r6, r0
 8000848:	3568      	adds	r5, #104	@ 0x68
 800084a:	e7e9      	b.n	8000820 <_fwalk_sglue+0x10>

0800084c <iprintf>:
 800084c:	b40f      	push	{r0, r1, r2, r3}
 800084e:	b507      	push	{r0, r1, r2, lr}
 8000850:	4906      	ldr	r1, [pc, #24]	@ (800086c <iprintf+0x20>)
 8000852:	ab04      	add	r3, sp, #16
 8000854:	6808      	ldr	r0, [r1, #0]
 8000856:	f853 2b04 	ldr.w	r2, [r3], #4
 800085a:	6881      	ldr	r1, [r0, #8]
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	f000 f9e9 	bl	8000c34 <_vfiprintf_r>
 8000862:	b003      	add	sp, #12
 8000864:	f85d eb04 	ldr.w	lr, [sp], #4
 8000868:	b004      	add	sp, #16
 800086a:	4770      	bx	lr
 800086c:	2000000c 	.word	0x2000000c

08000870 <__sread>:
 8000870:	b510      	push	{r4, lr}
 8000872:	460c      	mov	r4, r1
 8000874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000878:	f000 f868 	bl	800094c <_read_r>
 800087c:	2800      	cmp	r0, #0
 800087e:	bfab      	itete	ge
 8000880:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000882:	89a3      	ldrhlt	r3, [r4, #12]
 8000884:	181b      	addge	r3, r3, r0
 8000886:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800088a:	bfac      	ite	ge
 800088c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800088e:	81a3      	strhlt	r3, [r4, #12]
 8000890:	bd10      	pop	{r4, pc}

08000892 <__swrite>:
 8000892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000896:	461f      	mov	r7, r3
 8000898:	898b      	ldrh	r3, [r1, #12]
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	4605      	mov	r5, r0
 800089e:	460c      	mov	r4, r1
 80008a0:	4616      	mov	r6, r2
 80008a2:	d505      	bpl.n	80008b0 <__swrite+0x1e>
 80008a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a8:	2302      	movs	r3, #2
 80008aa:	2200      	movs	r2, #0
 80008ac:	f000 f83c 	bl	8000928 <_lseek_r>
 80008b0:	89a3      	ldrh	r3, [r4, #12]
 80008b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008ba:	81a3      	strh	r3, [r4, #12]
 80008bc:	4632      	mov	r2, r6
 80008be:	463b      	mov	r3, r7
 80008c0:	4628      	mov	r0, r5
 80008c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008c6:	f000 b853 	b.w	8000970 <_write_r>

080008ca <__sseek>:
 80008ca:	b510      	push	{r4, lr}
 80008cc:	460c      	mov	r4, r1
 80008ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008d2:	f000 f829 	bl	8000928 <_lseek_r>
 80008d6:	1c43      	adds	r3, r0, #1
 80008d8:	89a3      	ldrh	r3, [r4, #12]
 80008da:	bf15      	itete	ne
 80008dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008e6:	81a3      	strheq	r3, [r4, #12]
 80008e8:	bf18      	it	ne
 80008ea:	81a3      	strhne	r3, [r4, #12]
 80008ec:	bd10      	pop	{r4, pc}

080008ee <__sclose>:
 80008ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008f2:	f000 b809 	b.w	8000908 <_close_r>

080008f6 <memset>:
 80008f6:	4402      	add	r2, r0
 80008f8:	4603      	mov	r3, r0
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d100      	bne.n	8000900 <memset+0xa>
 80008fe:	4770      	bx	lr
 8000900:	f803 1b01 	strb.w	r1, [r3], #1
 8000904:	e7f9      	b.n	80008fa <memset+0x4>
	...

08000908 <_close_r>:
 8000908:	b538      	push	{r3, r4, r5, lr}
 800090a:	4d06      	ldr	r5, [pc, #24]	@ (8000924 <_close_r+0x1c>)
 800090c:	2300      	movs	r3, #0
 800090e:	4604      	mov	r4, r0
 8000910:	4608      	mov	r0, r1
 8000912:	602b      	str	r3, [r5, #0]
 8000914:	f7ff fd41 	bl	800039a <_close>
 8000918:	1c43      	adds	r3, r0, #1
 800091a:	d102      	bne.n	8000922 <_close_r+0x1a>
 800091c:	682b      	ldr	r3, [r5, #0]
 800091e:	b103      	cbz	r3, 8000922 <_close_r+0x1a>
 8000920:	6023      	str	r3, [r4, #0]
 8000922:	bd38      	pop	{r3, r4, r5, pc}
 8000924:	200001c0 	.word	0x200001c0

08000928 <_lseek_r>:
 8000928:	b538      	push	{r3, r4, r5, lr}
 800092a:	4d07      	ldr	r5, [pc, #28]	@ (8000948 <_lseek_r+0x20>)
 800092c:	4604      	mov	r4, r0
 800092e:	4608      	mov	r0, r1
 8000930:	4611      	mov	r1, r2
 8000932:	2200      	movs	r2, #0
 8000934:	602a      	str	r2, [r5, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	f7ff fd56 	bl	80003e8 <_lseek>
 800093c:	1c43      	adds	r3, r0, #1
 800093e:	d102      	bne.n	8000946 <_lseek_r+0x1e>
 8000940:	682b      	ldr	r3, [r5, #0]
 8000942:	b103      	cbz	r3, 8000946 <_lseek_r+0x1e>
 8000944:	6023      	str	r3, [r4, #0]
 8000946:	bd38      	pop	{r3, r4, r5, pc}
 8000948:	200001c0 	.word	0x200001c0

0800094c <_read_r>:
 800094c:	b538      	push	{r3, r4, r5, lr}
 800094e:	4d07      	ldr	r5, [pc, #28]	@ (800096c <_read_r+0x20>)
 8000950:	4604      	mov	r4, r0
 8000952:	4608      	mov	r0, r1
 8000954:	4611      	mov	r1, r2
 8000956:	2200      	movs	r2, #0
 8000958:	602a      	str	r2, [r5, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	f7ff fce4 	bl	8000328 <_read>
 8000960:	1c43      	adds	r3, r0, #1
 8000962:	d102      	bne.n	800096a <_read_r+0x1e>
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	b103      	cbz	r3, 800096a <_read_r+0x1e>
 8000968:	6023      	str	r3, [r4, #0]
 800096a:	bd38      	pop	{r3, r4, r5, pc}
 800096c:	200001c0 	.word	0x200001c0

08000970 <_write_r>:
 8000970:	b538      	push	{r3, r4, r5, lr}
 8000972:	4d07      	ldr	r5, [pc, #28]	@ (8000990 <_write_r+0x20>)
 8000974:	4604      	mov	r4, r0
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	2200      	movs	r2, #0
 800097c:	602a      	str	r2, [r5, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	f7ff fcef 	bl	8000362 <_write>
 8000984:	1c43      	adds	r3, r0, #1
 8000986:	d102      	bne.n	800098e <_write_r+0x1e>
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	b103      	cbz	r3, 800098e <_write_r+0x1e>
 800098c:	6023      	str	r3, [r4, #0]
 800098e:	bd38      	pop	{r3, r4, r5, pc}
 8000990:	200001c0 	.word	0x200001c0

08000994 <__errno>:
 8000994:	4b01      	ldr	r3, [pc, #4]	@ (800099c <__errno+0x8>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	2000000c 	.word	0x2000000c

080009a0 <__libc_init_array>:
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	4d0d      	ldr	r5, [pc, #52]	@ (80009d8 <__libc_init_array+0x38>)
 80009a4:	4c0d      	ldr	r4, [pc, #52]	@ (80009dc <__libc_init_array+0x3c>)
 80009a6:	1b64      	subs	r4, r4, r5
 80009a8:	10a4      	asrs	r4, r4, #2
 80009aa:	2600      	movs	r6, #0
 80009ac:	42a6      	cmp	r6, r4
 80009ae:	d109      	bne.n	80009c4 <__libc_init_array+0x24>
 80009b0:	4d0b      	ldr	r5, [pc, #44]	@ (80009e0 <__libc_init_array+0x40>)
 80009b2:	4c0c      	ldr	r4, [pc, #48]	@ (80009e4 <__libc_init_array+0x44>)
 80009b4:	f000 fdb8 	bl	8001528 <_init>
 80009b8:	1b64      	subs	r4, r4, r5
 80009ba:	10a4      	asrs	r4, r4, #2
 80009bc:	2600      	movs	r6, #0
 80009be:	42a6      	cmp	r6, r4
 80009c0:	d105      	bne.n	80009ce <__libc_init_array+0x2e>
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c8:	4798      	blx	r3
 80009ca:	3601      	adds	r6, #1
 80009cc:	e7ee      	b.n	80009ac <__libc_init_array+0xc>
 80009ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d2:	4798      	blx	r3
 80009d4:	3601      	adds	r6, #1
 80009d6:	e7f2      	b.n	80009be <__libc_init_array+0x1e>
 80009d8:	08001590 	.word	0x08001590
 80009dc:	08001590 	.word	0x08001590
 80009e0:	08001590 	.word	0x08001590
 80009e4:	08001594 	.word	0x08001594

080009e8 <__retarget_lock_init_recursive>:
 80009e8:	4770      	bx	lr

080009ea <__retarget_lock_acquire_recursive>:
 80009ea:	4770      	bx	lr

080009ec <__retarget_lock_release_recursive>:
 80009ec:	4770      	bx	lr
	...

080009f0 <_free_r>:
 80009f0:	b538      	push	{r3, r4, r5, lr}
 80009f2:	4605      	mov	r5, r0
 80009f4:	2900      	cmp	r1, #0
 80009f6:	d041      	beq.n	8000a7c <_free_r+0x8c>
 80009f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009fc:	1f0c      	subs	r4, r1, #4
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	bfb8      	it	lt
 8000a02:	18e4      	addlt	r4, r4, r3
 8000a04:	f000 f8e0 	bl	8000bc8 <__malloc_lock>
 8000a08:	4a1d      	ldr	r2, [pc, #116]	@ (8000a80 <_free_r+0x90>)
 8000a0a:	6813      	ldr	r3, [r2, #0]
 8000a0c:	b933      	cbnz	r3, 8000a1c <_free_r+0x2c>
 8000a0e:	6063      	str	r3, [r4, #4]
 8000a10:	6014      	str	r4, [r2, #0]
 8000a12:	4628      	mov	r0, r5
 8000a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a18:	f000 b8dc 	b.w	8000bd4 <__malloc_unlock>
 8000a1c:	42a3      	cmp	r3, r4
 8000a1e:	d908      	bls.n	8000a32 <_free_r+0x42>
 8000a20:	6820      	ldr	r0, [r4, #0]
 8000a22:	1821      	adds	r1, r4, r0
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf01      	itttt	eq
 8000a28:	6819      	ldreq	r1, [r3, #0]
 8000a2a:	685b      	ldreq	r3, [r3, #4]
 8000a2c:	1809      	addeq	r1, r1, r0
 8000a2e:	6021      	streq	r1, [r4, #0]
 8000a30:	e7ed      	b.n	8000a0e <_free_r+0x1e>
 8000a32:	461a      	mov	r2, r3
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	b10b      	cbz	r3, 8000a3c <_free_r+0x4c>
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d9fa      	bls.n	8000a32 <_free_r+0x42>
 8000a3c:	6811      	ldr	r1, [r2, #0]
 8000a3e:	1850      	adds	r0, r2, r1
 8000a40:	42a0      	cmp	r0, r4
 8000a42:	d10b      	bne.n	8000a5c <_free_r+0x6c>
 8000a44:	6820      	ldr	r0, [r4, #0]
 8000a46:	4401      	add	r1, r0
 8000a48:	1850      	adds	r0, r2, r1
 8000a4a:	4283      	cmp	r3, r0
 8000a4c:	6011      	str	r1, [r2, #0]
 8000a4e:	d1e0      	bne.n	8000a12 <_free_r+0x22>
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	6053      	str	r3, [r2, #4]
 8000a56:	4408      	add	r0, r1
 8000a58:	6010      	str	r0, [r2, #0]
 8000a5a:	e7da      	b.n	8000a12 <_free_r+0x22>
 8000a5c:	d902      	bls.n	8000a64 <_free_r+0x74>
 8000a5e:	230c      	movs	r3, #12
 8000a60:	602b      	str	r3, [r5, #0]
 8000a62:	e7d6      	b.n	8000a12 <_free_r+0x22>
 8000a64:	6820      	ldr	r0, [r4, #0]
 8000a66:	1821      	adds	r1, r4, r0
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	bf04      	itt	eq
 8000a6c:	6819      	ldreq	r1, [r3, #0]
 8000a6e:	685b      	ldreq	r3, [r3, #4]
 8000a70:	6063      	str	r3, [r4, #4]
 8000a72:	bf04      	itt	eq
 8000a74:	1809      	addeq	r1, r1, r0
 8000a76:	6021      	streq	r1, [r4, #0]
 8000a78:	6054      	str	r4, [r2, #4]
 8000a7a:	e7ca      	b.n	8000a12 <_free_r+0x22>
 8000a7c:	bd38      	pop	{r3, r4, r5, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001cc 	.word	0x200001cc

08000a84 <sbrk_aligned>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4e0f      	ldr	r6, [pc, #60]	@ (8000ac4 <sbrk_aligned+0x40>)
 8000a88:	460c      	mov	r4, r1
 8000a8a:	6831      	ldr	r1, [r6, #0]
 8000a8c:	4605      	mov	r5, r0
 8000a8e:	b911      	cbnz	r1, 8000a96 <sbrk_aligned+0x12>
 8000a90:	f000 fcb6 	bl	8001400 <_sbrk_r>
 8000a94:	6030      	str	r0, [r6, #0]
 8000a96:	4621      	mov	r1, r4
 8000a98:	4628      	mov	r0, r5
 8000a9a:	f000 fcb1 	bl	8001400 <_sbrk_r>
 8000a9e:	1c43      	adds	r3, r0, #1
 8000aa0:	d103      	bne.n	8000aaa <sbrk_aligned+0x26>
 8000aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	bd70      	pop	{r4, r5, r6, pc}
 8000aaa:	1cc4      	adds	r4, r0, #3
 8000aac:	f024 0403 	bic.w	r4, r4, #3
 8000ab0:	42a0      	cmp	r0, r4
 8000ab2:	d0f8      	beq.n	8000aa6 <sbrk_aligned+0x22>
 8000ab4:	1a21      	subs	r1, r4, r0
 8000ab6:	4628      	mov	r0, r5
 8000ab8:	f000 fca2 	bl	8001400 <_sbrk_r>
 8000abc:	3001      	adds	r0, #1
 8000abe:	d1f2      	bne.n	8000aa6 <sbrk_aligned+0x22>
 8000ac0:	e7ef      	b.n	8000aa2 <sbrk_aligned+0x1e>
 8000ac2:	bf00      	nop
 8000ac4:	200001c8 	.word	0x200001c8

08000ac8 <_malloc_r>:
 8000ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000acc:	1ccd      	adds	r5, r1, #3
 8000ace:	f025 0503 	bic.w	r5, r5, #3
 8000ad2:	3508      	adds	r5, #8
 8000ad4:	2d0c      	cmp	r5, #12
 8000ad6:	bf38      	it	cc
 8000ad8:	250c      	movcc	r5, #12
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	4606      	mov	r6, r0
 8000ade:	db01      	blt.n	8000ae4 <_malloc_r+0x1c>
 8000ae0:	42a9      	cmp	r1, r5
 8000ae2:	d904      	bls.n	8000aee <_malloc_r+0x26>
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	6033      	str	r3, [r6, #0]
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bc4 <_malloc_r+0xfc>
 8000af2:	f000 f869 	bl	8000bc8 <__malloc_lock>
 8000af6:	f8d8 3000 	ldr.w	r3, [r8]
 8000afa:	461c      	mov	r4, r3
 8000afc:	bb44      	cbnz	r4, 8000b50 <_malloc_r+0x88>
 8000afe:	4629      	mov	r1, r5
 8000b00:	4630      	mov	r0, r6
 8000b02:	f7ff ffbf 	bl	8000a84 <sbrk_aligned>
 8000b06:	1c43      	adds	r3, r0, #1
 8000b08:	4604      	mov	r4, r0
 8000b0a:	d158      	bne.n	8000bbe <_malloc_r+0xf6>
 8000b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b10:	4627      	mov	r7, r4
 8000b12:	2f00      	cmp	r7, #0
 8000b14:	d143      	bne.n	8000b9e <_malloc_r+0xd6>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d04b      	beq.n	8000bb2 <_malloc_r+0xea>
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	4630      	mov	r0, r6
 8000b20:	eb04 0903 	add.w	r9, r4, r3
 8000b24:	f000 fc6c 	bl	8001400 <_sbrk_r>
 8000b28:	4581      	cmp	r9, r0
 8000b2a:	d142      	bne.n	8000bb2 <_malloc_r+0xea>
 8000b2c:	6821      	ldr	r1, [r4, #0]
 8000b2e:	1a6d      	subs	r5, r5, r1
 8000b30:	4629      	mov	r1, r5
 8000b32:	4630      	mov	r0, r6
 8000b34:	f7ff ffa6 	bl	8000a84 <sbrk_aligned>
 8000b38:	3001      	adds	r0, #1
 8000b3a:	d03a      	beq.n	8000bb2 <_malloc_r+0xea>
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	442b      	add	r3, r5
 8000b40:	6023      	str	r3, [r4, #0]
 8000b42:	f8d8 3000 	ldr.w	r3, [r8]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	bb62      	cbnz	r2, 8000ba4 <_malloc_r+0xdc>
 8000b4a:	f8c8 7000 	str.w	r7, [r8]
 8000b4e:	e00f      	b.n	8000b70 <_malloc_r+0xa8>
 8000b50:	6822      	ldr	r2, [r4, #0]
 8000b52:	1b52      	subs	r2, r2, r5
 8000b54:	d420      	bmi.n	8000b98 <_malloc_r+0xd0>
 8000b56:	2a0b      	cmp	r2, #11
 8000b58:	d917      	bls.n	8000b8a <_malloc_r+0xc2>
 8000b5a:	1961      	adds	r1, r4, r5
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	6025      	str	r5, [r4, #0]
 8000b60:	bf18      	it	ne
 8000b62:	6059      	strne	r1, [r3, #4]
 8000b64:	6863      	ldr	r3, [r4, #4]
 8000b66:	bf08      	it	eq
 8000b68:	f8c8 1000 	streq.w	r1, [r8]
 8000b6c:	5162      	str	r2, [r4, r5]
 8000b6e:	604b      	str	r3, [r1, #4]
 8000b70:	4630      	mov	r0, r6
 8000b72:	f000 f82f 	bl	8000bd4 <__malloc_unlock>
 8000b76:	f104 000b 	add.w	r0, r4, #11
 8000b7a:	1d23      	adds	r3, r4, #4
 8000b7c:	f020 0007 	bic.w	r0, r0, #7
 8000b80:	1ac2      	subs	r2, r0, r3
 8000b82:	bf1c      	itt	ne
 8000b84:	1a1b      	subne	r3, r3, r0
 8000b86:	50a3      	strne	r3, [r4, r2]
 8000b88:	e7af      	b.n	8000aea <_malloc_r+0x22>
 8000b8a:	6862      	ldr	r2, [r4, #4]
 8000b8c:	42a3      	cmp	r3, r4
 8000b8e:	bf0c      	ite	eq
 8000b90:	f8c8 2000 	streq.w	r2, [r8]
 8000b94:	605a      	strne	r2, [r3, #4]
 8000b96:	e7eb      	b.n	8000b70 <_malloc_r+0xa8>
 8000b98:	4623      	mov	r3, r4
 8000b9a:	6864      	ldr	r4, [r4, #4]
 8000b9c:	e7ae      	b.n	8000afc <_malloc_r+0x34>
 8000b9e:	463c      	mov	r4, r7
 8000ba0:	687f      	ldr	r7, [r7, #4]
 8000ba2:	e7b6      	b.n	8000b12 <_malloc_r+0x4a>
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	42a3      	cmp	r3, r4
 8000baa:	d1fb      	bne.n	8000ba4 <_malloc_r+0xdc>
 8000bac:	2300      	movs	r3, #0
 8000bae:	6053      	str	r3, [r2, #4]
 8000bb0:	e7de      	b.n	8000b70 <_malloc_r+0xa8>
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	6033      	str	r3, [r6, #0]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	f000 f80c 	bl	8000bd4 <__malloc_unlock>
 8000bbc:	e794      	b.n	8000ae8 <_malloc_r+0x20>
 8000bbe:	6005      	str	r5, [r0, #0]
 8000bc0:	e7d6      	b.n	8000b70 <_malloc_r+0xa8>
 8000bc2:	bf00      	nop
 8000bc4:	200001cc 	.word	0x200001cc

08000bc8 <__malloc_lock>:
 8000bc8:	4801      	ldr	r0, [pc, #4]	@ (8000bd0 <__malloc_lock+0x8>)
 8000bca:	f7ff bf0e 	b.w	80009ea <__retarget_lock_acquire_recursive>
 8000bce:	bf00      	nop
 8000bd0:	200001c4 	.word	0x200001c4

08000bd4 <__malloc_unlock>:
 8000bd4:	4801      	ldr	r0, [pc, #4]	@ (8000bdc <__malloc_unlock+0x8>)
 8000bd6:	f7ff bf09 	b.w	80009ec <__retarget_lock_release_recursive>
 8000bda:	bf00      	nop
 8000bdc:	200001c4 	.word	0x200001c4

08000be0 <__sfputc_r>:
 8000be0:	6893      	ldr	r3, [r2, #8]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	b410      	push	{r4}
 8000be8:	6093      	str	r3, [r2, #8]
 8000bea:	da08      	bge.n	8000bfe <__sfputc_r+0x1e>
 8000bec:	6994      	ldr	r4, [r2, #24]
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	db01      	blt.n	8000bf6 <__sfputc_r+0x16>
 8000bf2:	290a      	cmp	r1, #10
 8000bf4:	d103      	bne.n	8000bfe <__sfputc_r+0x1e>
 8000bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bfa:	f000 bb6d 	b.w	80012d8 <__swbuf_r>
 8000bfe:	6813      	ldr	r3, [r2, #0]
 8000c00:	1c58      	adds	r0, r3, #1
 8000c02:	6010      	str	r0, [r2, #0]
 8000c04:	7019      	strb	r1, [r3, #0]
 8000c06:	4608      	mov	r0, r1
 8000c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <__sfputs_r>:
 8000c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c10:	4606      	mov	r6, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	4614      	mov	r4, r2
 8000c16:	18d5      	adds	r5, r2, r3
 8000c18:	42ac      	cmp	r4, r5
 8000c1a:	d101      	bne.n	8000c20 <__sfputs_r+0x12>
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	e007      	b.n	8000c30 <__sfputs_r+0x22>
 8000c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c24:	463a      	mov	r2, r7
 8000c26:	4630      	mov	r0, r6
 8000c28:	f7ff ffda 	bl	8000be0 <__sfputc_r>
 8000c2c:	1c43      	adds	r3, r0, #1
 8000c2e:	d1f3      	bne.n	8000c18 <__sfputs_r+0xa>
 8000c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c34 <_vfiprintf_r>:
 8000c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c38:	460d      	mov	r5, r1
 8000c3a:	b09d      	sub	sp, #116	@ 0x74
 8000c3c:	4614      	mov	r4, r2
 8000c3e:	4698      	mov	r8, r3
 8000c40:	4606      	mov	r6, r0
 8000c42:	b118      	cbz	r0, 8000c4c <_vfiprintf_r+0x18>
 8000c44:	6a03      	ldr	r3, [r0, #32]
 8000c46:	b90b      	cbnz	r3, 8000c4c <_vfiprintf_r+0x18>
 8000c48:	f7ff fdca 	bl	80007e0 <__sinit>
 8000c4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c4e:	07d9      	lsls	r1, r3, #31
 8000c50:	d405      	bmi.n	8000c5e <_vfiprintf_r+0x2a>
 8000c52:	89ab      	ldrh	r3, [r5, #12]
 8000c54:	059a      	lsls	r2, r3, #22
 8000c56:	d402      	bmi.n	8000c5e <_vfiprintf_r+0x2a>
 8000c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c5a:	f7ff fec6 	bl	80009ea <__retarget_lock_acquire_recursive>
 8000c5e:	89ab      	ldrh	r3, [r5, #12]
 8000c60:	071b      	lsls	r3, r3, #28
 8000c62:	d501      	bpl.n	8000c68 <_vfiprintf_r+0x34>
 8000c64:	692b      	ldr	r3, [r5, #16]
 8000c66:	b99b      	cbnz	r3, 8000c90 <_vfiprintf_r+0x5c>
 8000c68:	4629      	mov	r1, r5
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	f000 fb72 	bl	8001354 <__swsetup_r>
 8000c70:	b170      	cbz	r0, 8000c90 <_vfiprintf_r+0x5c>
 8000c72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c74:	07dc      	lsls	r4, r3, #31
 8000c76:	d504      	bpl.n	8000c82 <_vfiprintf_r+0x4e>
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	b01d      	add	sp, #116	@ 0x74
 8000c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c82:	89ab      	ldrh	r3, [r5, #12]
 8000c84:	0598      	lsls	r0, r3, #22
 8000c86:	d4f7      	bmi.n	8000c78 <_vfiprintf_r+0x44>
 8000c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c8a:	f7ff feaf 	bl	80009ec <__retarget_lock_release_recursive>
 8000c8e:	e7f3      	b.n	8000c78 <_vfiprintf_r+0x44>
 8000c90:	2300      	movs	r3, #0
 8000c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c94:	2320      	movs	r3, #32
 8000c96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c9e:	2330      	movs	r3, #48	@ 0x30
 8000ca0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e50 <_vfiprintf_r+0x21c>
 8000ca4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ca8:	f04f 0901 	mov.w	r9, #1
 8000cac:	4623      	mov	r3, r4
 8000cae:	469a      	mov	sl, r3
 8000cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cb4:	b10a      	cbz	r2, 8000cba <_vfiprintf_r+0x86>
 8000cb6:	2a25      	cmp	r2, #37	@ 0x25
 8000cb8:	d1f9      	bne.n	8000cae <_vfiprintf_r+0x7a>
 8000cba:	ebba 0b04 	subs.w	fp, sl, r4
 8000cbe:	d00b      	beq.n	8000cd8 <_vfiprintf_r+0xa4>
 8000cc0:	465b      	mov	r3, fp
 8000cc2:	4622      	mov	r2, r4
 8000cc4:	4629      	mov	r1, r5
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	f7ff ffa1 	bl	8000c0e <__sfputs_r>
 8000ccc:	3001      	adds	r0, #1
 8000cce:	f000 80a7 	beq.w	8000e20 <_vfiprintf_r+0x1ec>
 8000cd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000cd4:	445a      	add	r2, fp
 8000cd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f000 809f 	beq.w	8000e20 <_vfiprintf_r+0x1ec>
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cec:	f10a 0a01 	add.w	sl, sl, #1
 8000cf0:	9304      	str	r3, [sp, #16]
 8000cf2:	9307      	str	r3, [sp, #28]
 8000cf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000cf8:	931a      	str	r3, [sp, #104]	@ 0x68
 8000cfa:	4654      	mov	r4, sl
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d02:	4853      	ldr	r0, [pc, #332]	@ (8000e50 <_vfiprintf_r+0x21c>)
 8000d04:	f7ff fa84 	bl	8000210 <memchr>
 8000d08:	9a04      	ldr	r2, [sp, #16]
 8000d0a:	b9d8      	cbnz	r0, 8000d44 <_vfiprintf_r+0x110>
 8000d0c:	06d1      	lsls	r1, r2, #27
 8000d0e:	bf44      	itt	mi
 8000d10:	2320      	movmi	r3, #32
 8000d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d16:	0713      	lsls	r3, r2, #28
 8000d18:	bf44      	itt	mi
 8000d1a:	232b      	movmi	r3, #43	@ 0x2b
 8000d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d20:	f89a 3000 	ldrb.w	r3, [sl]
 8000d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d26:	d015      	beq.n	8000d54 <_vfiprintf_r+0x120>
 8000d28:	9a07      	ldr	r2, [sp, #28]
 8000d2a:	4654      	mov	r4, sl
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f04f 0c0a 	mov.w	ip, #10
 8000d32:	4621      	mov	r1, r4
 8000d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d38:	3b30      	subs	r3, #48	@ 0x30
 8000d3a:	2b09      	cmp	r3, #9
 8000d3c:	d94b      	bls.n	8000dd6 <_vfiprintf_r+0x1a2>
 8000d3e:	b1b0      	cbz	r0, 8000d6e <_vfiprintf_r+0x13a>
 8000d40:	9207      	str	r2, [sp, #28]
 8000d42:	e014      	b.n	8000d6e <_vfiprintf_r+0x13a>
 8000d44:	eba0 0308 	sub.w	r3, r0, r8
 8000d48:	fa09 f303 	lsl.w	r3, r9, r3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	9304      	str	r3, [sp, #16]
 8000d50:	46a2      	mov	sl, r4
 8000d52:	e7d2      	b.n	8000cfa <_vfiprintf_r+0xc6>
 8000d54:	9b03      	ldr	r3, [sp, #12]
 8000d56:	1d19      	adds	r1, r3, #4
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	9103      	str	r1, [sp, #12]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bfbb      	ittet	lt
 8000d60:	425b      	neglt	r3, r3
 8000d62:	f042 0202 	orrlt.w	r2, r2, #2
 8000d66:	9307      	strge	r3, [sp, #28]
 8000d68:	9307      	strlt	r3, [sp, #28]
 8000d6a:	bfb8      	it	lt
 8000d6c:	9204      	strlt	r2, [sp, #16]
 8000d6e:	7823      	ldrb	r3, [r4, #0]
 8000d70:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d72:	d10a      	bne.n	8000d8a <_vfiprintf_r+0x156>
 8000d74:	7863      	ldrb	r3, [r4, #1]
 8000d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d78:	d132      	bne.n	8000de0 <_vfiprintf_r+0x1ac>
 8000d7a:	9b03      	ldr	r3, [sp, #12]
 8000d7c:	1d1a      	adds	r2, r3, #4
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	9203      	str	r2, [sp, #12]
 8000d82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d86:	3402      	adds	r4, #2
 8000d88:	9305      	str	r3, [sp, #20]
 8000d8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e60 <_vfiprintf_r+0x22c>
 8000d8e:	7821      	ldrb	r1, [r4, #0]
 8000d90:	2203      	movs	r2, #3
 8000d92:	4650      	mov	r0, sl
 8000d94:	f7ff fa3c 	bl	8000210 <memchr>
 8000d98:	b138      	cbz	r0, 8000daa <_vfiprintf_r+0x176>
 8000d9a:	9b04      	ldr	r3, [sp, #16]
 8000d9c:	eba0 000a 	sub.w	r0, r0, sl
 8000da0:	2240      	movs	r2, #64	@ 0x40
 8000da2:	4082      	lsls	r2, r0
 8000da4:	4313      	orrs	r3, r2
 8000da6:	3401      	adds	r4, #1
 8000da8:	9304      	str	r3, [sp, #16]
 8000daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dae:	4829      	ldr	r0, [pc, #164]	@ (8000e54 <_vfiprintf_r+0x220>)
 8000db0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000db4:	2206      	movs	r2, #6
 8000db6:	f7ff fa2b 	bl	8000210 <memchr>
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	d03f      	beq.n	8000e3e <_vfiprintf_r+0x20a>
 8000dbe:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <_vfiprintf_r+0x224>)
 8000dc0:	bb1b      	cbnz	r3, 8000e0a <_vfiprintf_r+0x1d6>
 8000dc2:	9b03      	ldr	r3, [sp, #12]
 8000dc4:	3307      	adds	r3, #7
 8000dc6:	f023 0307 	bic.w	r3, r3, #7
 8000dca:	3308      	adds	r3, #8
 8000dcc:	9303      	str	r3, [sp, #12]
 8000dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000dd0:	443b      	add	r3, r7
 8000dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dd4:	e76a      	b.n	8000cac <_vfiprintf_r+0x78>
 8000dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dda:	460c      	mov	r4, r1
 8000ddc:	2001      	movs	r0, #1
 8000dde:	e7a8      	b.n	8000d32 <_vfiprintf_r+0xfe>
 8000de0:	2300      	movs	r3, #0
 8000de2:	3401      	adds	r4, #1
 8000de4:	9305      	str	r3, [sp, #20]
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 0c0a 	mov.w	ip, #10
 8000dec:	4620      	mov	r0, r4
 8000dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000df2:	3a30      	subs	r2, #48	@ 0x30
 8000df4:	2a09      	cmp	r2, #9
 8000df6:	d903      	bls.n	8000e00 <_vfiprintf_r+0x1cc>
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0c6      	beq.n	8000d8a <_vfiprintf_r+0x156>
 8000dfc:	9105      	str	r1, [sp, #20]
 8000dfe:	e7c4      	b.n	8000d8a <_vfiprintf_r+0x156>
 8000e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e04:	4604      	mov	r4, r0
 8000e06:	2301      	movs	r3, #1
 8000e08:	e7f0      	b.n	8000dec <_vfiprintf_r+0x1b8>
 8000e0a:	ab03      	add	r3, sp, #12
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	462a      	mov	r2, r5
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <_vfiprintf_r+0x228>)
 8000e12:	a904      	add	r1, sp, #16
 8000e14:	4630      	mov	r0, r6
 8000e16:	f3af 8000 	nop.w
 8000e1a:	4607      	mov	r7, r0
 8000e1c:	1c78      	adds	r0, r7, #1
 8000e1e:	d1d6      	bne.n	8000dce <_vfiprintf_r+0x19a>
 8000e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e22:	07d9      	lsls	r1, r3, #31
 8000e24:	d405      	bmi.n	8000e32 <_vfiprintf_r+0x1fe>
 8000e26:	89ab      	ldrh	r3, [r5, #12]
 8000e28:	059a      	lsls	r2, r3, #22
 8000e2a:	d402      	bmi.n	8000e32 <_vfiprintf_r+0x1fe>
 8000e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e2e:	f7ff fddd 	bl	80009ec <__retarget_lock_release_recursive>
 8000e32:	89ab      	ldrh	r3, [r5, #12]
 8000e34:	065b      	lsls	r3, r3, #25
 8000e36:	f53f af1f 	bmi.w	8000c78 <_vfiprintf_r+0x44>
 8000e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e3c:	e71e      	b.n	8000c7c <_vfiprintf_r+0x48>
 8000e3e:	ab03      	add	r3, sp, #12
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	462a      	mov	r2, r5
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <_vfiprintf_r+0x228>)
 8000e46:	a904      	add	r1, sp, #16
 8000e48:	4630      	mov	r0, r6
 8000e4a:	f000 f879 	bl	8000f40 <_printf_i>
 8000e4e:	e7e4      	b.n	8000e1a <_vfiprintf_r+0x1e6>
 8000e50:	08001554 	.word	0x08001554
 8000e54:	0800155e 	.word	0x0800155e
 8000e58:	00000000 	.word	0x00000000
 8000e5c:	08000c0f 	.word	0x08000c0f
 8000e60:	0800155a 	.word	0x0800155a

08000e64 <_printf_common>:
 8000e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e68:	4616      	mov	r6, r2
 8000e6a:	4698      	mov	r8, r3
 8000e6c:	688a      	ldr	r2, [r1, #8]
 8000e6e:	690b      	ldr	r3, [r1, #16]
 8000e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e74:	4293      	cmp	r3, r2
 8000e76:	bfb8      	it	lt
 8000e78:	4613      	movlt	r3, r2
 8000e7a:	6033      	str	r3, [r6, #0]
 8000e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e80:	4607      	mov	r7, r0
 8000e82:	460c      	mov	r4, r1
 8000e84:	b10a      	cbz	r2, 8000e8a <_printf_common+0x26>
 8000e86:	3301      	adds	r3, #1
 8000e88:	6033      	str	r3, [r6, #0]
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	0699      	lsls	r1, r3, #26
 8000e8e:	bf42      	ittt	mi
 8000e90:	6833      	ldrmi	r3, [r6, #0]
 8000e92:	3302      	addmi	r3, #2
 8000e94:	6033      	strmi	r3, [r6, #0]
 8000e96:	6825      	ldr	r5, [r4, #0]
 8000e98:	f015 0506 	ands.w	r5, r5, #6
 8000e9c:	d106      	bne.n	8000eac <_printf_common+0x48>
 8000e9e:	f104 0a19 	add.w	sl, r4, #25
 8000ea2:	68e3      	ldr	r3, [r4, #12]
 8000ea4:	6832      	ldr	r2, [r6, #0]
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	42ab      	cmp	r3, r5
 8000eaa:	dc26      	bgt.n	8000efa <_printf_common+0x96>
 8000eac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000eb0:	6822      	ldr	r2, [r4, #0]
 8000eb2:	3b00      	subs	r3, #0
 8000eb4:	bf18      	it	ne
 8000eb6:	2301      	movne	r3, #1
 8000eb8:	0692      	lsls	r2, r2, #26
 8000eba:	d42b      	bmi.n	8000f14 <_printf_common+0xb0>
 8000ebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ec0:	4641      	mov	r1, r8
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	47c8      	blx	r9
 8000ec6:	3001      	adds	r0, #1
 8000ec8:	d01e      	beq.n	8000f08 <_printf_common+0xa4>
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	6922      	ldr	r2, [r4, #16]
 8000ece:	f003 0306 	and.w	r3, r3, #6
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf02      	ittt	eq
 8000ed6:	68e5      	ldreq	r5, [r4, #12]
 8000ed8:	6833      	ldreq	r3, [r6, #0]
 8000eda:	1aed      	subeq	r5, r5, r3
 8000edc:	68a3      	ldr	r3, [r4, #8]
 8000ede:	bf0c      	ite	eq
 8000ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ee4:	2500      	movne	r5, #0
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	bfc4      	itt	gt
 8000eea:	1a9b      	subgt	r3, r3, r2
 8000eec:	18ed      	addgt	r5, r5, r3
 8000eee:	2600      	movs	r6, #0
 8000ef0:	341a      	adds	r4, #26
 8000ef2:	42b5      	cmp	r5, r6
 8000ef4:	d11a      	bne.n	8000f2c <_printf_common+0xc8>
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	e008      	b.n	8000f0c <_printf_common+0xa8>
 8000efa:	2301      	movs	r3, #1
 8000efc:	4652      	mov	r2, sl
 8000efe:	4641      	mov	r1, r8
 8000f00:	4638      	mov	r0, r7
 8000f02:	47c8      	blx	r9
 8000f04:	3001      	adds	r0, #1
 8000f06:	d103      	bne.n	8000f10 <_printf_common+0xac>
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	3501      	adds	r5, #1
 8000f12:	e7c6      	b.n	8000ea2 <_printf_common+0x3e>
 8000f14:	18e1      	adds	r1, r4, r3
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	2030      	movs	r0, #48	@ 0x30
 8000f1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f1e:	4422      	add	r2, r4
 8000f20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f28:	3302      	adds	r3, #2
 8000f2a:	e7c7      	b.n	8000ebc <_printf_common+0x58>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	4622      	mov	r2, r4
 8000f30:	4641      	mov	r1, r8
 8000f32:	4638      	mov	r0, r7
 8000f34:	47c8      	blx	r9
 8000f36:	3001      	adds	r0, #1
 8000f38:	d0e6      	beq.n	8000f08 <_printf_common+0xa4>
 8000f3a:	3601      	adds	r6, #1
 8000f3c:	e7d9      	b.n	8000ef2 <_printf_common+0x8e>
	...

08000f40 <_printf_i>:
 8000f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	7e0f      	ldrb	r7, [r1, #24]
 8000f46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f48:	2f78      	cmp	r7, #120	@ 0x78
 8000f4a:	4691      	mov	r9, r2
 8000f4c:	4680      	mov	r8, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	469a      	mov	sl, r3
 8000f52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f56:	d807      	bhi.n	8000f68 <_printf_i+0x28>
 8000f58:	2f62      	cmp	r7, #98	@ 0x62
 8000f5a:	d80a      	bhi.n	8000f72 <_printf_i+0x32>
 8000f5c:	2f00      	cmp	r7, #0
 8000f5e:	f000 80d2 	beq.w	8001106 <_printf_i+0x1c6>
 8000f62:	2f58      	cmp	r7, #88	@ 0x58
 8000f64:	f000 80b9 	beq.w	80010da <_printf_i+0x19a>
 8000f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f70:	e03a      	b.n	8000fe8 <_printf_i+0xa8>
 8000f72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f76:	2b15      	cmp	r3, #21
 8000f78:	d8f6      	bhi.n	8000f68 <_printf_i+0x28>
 8000f7a:	a101      	add	r1, pc, #4	@ (adr r1, 8000f80 <_printf_i+0x40>)
 8000f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f80:	08000fd9 	.word	0x08000fd9
 8000f84:	08000fed 	.word	0x08000fed
 8000f88:	08000f69 	.word	0x08000f69
 8000f8c:	08000f69 	.word	0x08000f69
 8000f90:	08000f69 	.word	0x08000f69
 8000f94:	08000f69 	.word	0x08000f69
 8000f98:	08000fed 	.word	0x08000fed
 8000f9c:	08000f69 	.word	0x08000f69
 8000fa0:	08000f69 	.word	0x08000f69
 8000fa4:	08000f69 	.word	0x08000f69
 8000fa8:	08000f69 	.word	0x08000f69
 8000fac:	080010ed 	.word	0x080010ed
 8000fb0:	08001017 	.word	0x08001017
 8000fb4:	080010a7 	.word	0x080010a7
 8000fb8:	08000f69 	.word	0x08000f69
 8000fbc:	08000f69 	.word	0x08000f69
 8000fc0:	0800110f 	.word	0x0800110f
 8000fc4:	08000f69 	.word	0x08000f69
 8000fc8:	08001017 	.word	0x08001017
 8000fcc:	08000f69 	.word	0x08000f69
 8000fd0:	08000f69 	.word	0x08000f69
 8000fd4:	080010af 	.word	0x080010af
 8000fd8:	6833      	ldr	r3, [r6, #0]
 8000fda:	1d1a      	adds	r2, r3, #4
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6032      	str	r2, [r6, #0]
 8000fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e09d      	b.n	8001128 <_printf_i+0x1e8>
 8000fec:	6833      	ldr	r3, [r6, #0]
 8000fee:	6820      	ldr	r0, [r4, #0]
 8000ff0:	1d19      	adds	r1, r3, #4
 8000ff2:	6031      	str	r1, [r6, #0]
 8000ff4:	0606      	lsls	r6, r0, #24
 8000ff6:	d501      	bpl.n	8000ffc <_printf_i+0xbc>
 8000ff8:	681d      	ldr	r5, [r3, #0]
 8000ffa:	e003      	b.n	8001004 <_printf_i+0xc4>
 8000ffc:	0645      	lsls	r5, r0, #25
 8000ffe:	d5fb      	bpl.n	8000ff8 <_printf_i+0xb8>
 8001000:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001004:	2d00      	cmp	r5, #0
 8001006:	da03      	bge.n	8001010 <_printf_i+0xd0>
 8001008:	232d      	movs	r3, #45	@ 0x2d
 800100a:	426d      	negs	r5, r5
 800100c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001010:	4859      	ldr	r0, [pc, #356]	@ (8001178 <_printf_i+0x238>)
 8001012:	230a      	movs	r3, #10
 8001014:	e011      	b.n	800103a <_printf_i+0xfa>
 8001016:	6821      	ldr	r1, [r4, #0]
 8001018:	6833      	ldr	r3, [r6, #0]
 800101a:	0608      	lsls	r0, r1, #24
 800101c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001020:	d402      	bmi.n	8001028 <_printf_i+0xe8>
 8001022:	0649      	lsls	r1, r1, #25
 8001024:	bf48      	it	mi
 8001026:	b2ad      	uxthmi	r5, r5
 8001028:	2f6f      	cmp	r7, #111	@ 0x6f
 800102a:	4853      	ldr	r0, [pc, #332]	@ (8001178 <_printf_i+0x238>)
 800102c:	6033      	str	r3, [r6, #0]
 800102e:	bf14      	ite	ne
 8001030:	230a      	movne	r3, #10
 8001032:	2308      	moveq	r3, #8
 8001034:	2100      	movs	r1, #0
 8001036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800103a:	6866      	ldr	r6, [r4, #4]
 800103c:	60a6      	str	r6, [r4, #8]
 800103e:	2e00      	cmp	r6, #0
 8001040:	bfa2      	ittt	ge
 8001042:	6821      	ldrge	r1, [r4, #0]
 8001044:	f021 0104 	bicge.w	r1, r1, #4
 8001048:	6021      	strge	r1, [r4, #0]
 800104a:	b90d      	cbnz	r5, 8001050 <_printf_i+0x110>
 800104c:	2e00      	cmp	r6, #0
 800104e:	d04b      	beq.n	80010e8 <_printf_i+0x1a8>
 8001050:	4616      	mov	r6, r2
 8001052:	fbb5 f1f3 	udiv	r1, r5, r3
 8001056:	fb03 5711 	mls	r7, r3, r1, r5
 800105a:	5dc7      	ldrb	r7, [r0, r7]
 800105c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001060:	462f      	mov	r7, r5
 8001062:	42bb      	cmp	r3, r7
 8001064:	460d      	mov	r5, r1
 8001066:	d9f4      	bls.n	8001052 <_printf_i+0x112>
 8001068:	2b08      	cmp	r3, #8
 800106a:	d10b      	bne.n	8001084 <_printf_i+0x144>
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	07df      	lsls	r7, r3, #31
 8001070:	d508      	bpl.n	8001084 <_printf_i+0x144>
 8001072:	6923      	ldr	r3, [r4, #16]
 8001074:	6861      	ldr	r1, [r4, #4]
 8001076:	4299      	cmp	r1, r3
 8001078:	bfde      	ittt	le
 800107a:	2330      	movle	r3, #48	@ 0x30
 800107c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001080:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001084:	1b92      	subs	r2, r2, r6
 8001086:	6122      	str	r2, [r4, #16]
 8001088:	f8cd a000 	str.w	sl, [sp]
 800108c:	464b      	mov	r3, r9
 800108e:	aa03      	add	r2, sp, #12
 8001090:	4621      	mov	r1, r4
 8001092:	4640      	mov	r0, r8
 8001094:	f7ff fee6 	bl	8000e64 <_printf_common>
 8001098:	3001      	adds	r0, #1
 800109a:	d14a      	bne.n	8001132 <_printf_i+0x1f2>
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	b004      	add	sp, #16
 80010a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	f043 0320 	orr.w	r3, r3, #32
 80010ac:	6023      	str	r3, [r4, #0]
 80010ae:	4833      	ldr	r0, [pc, #204]	@ (800117c <_printf_i+0x23c>)
 80010b0:	2778      	movs	r7, #120	@ 0x78
 80010b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	6831      	ldr	r1, [r6, #0]
 80010ba:	061f      	lsls	r7, r3, #24
 80010bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80010c0:	d402      	bmi.n	80010c8 <_printf_i+0x188>
 80010c2:	065f      	lsls	r7, r3, #25
 80010c4:	bf48      	it	mi
 80010c6:	b2ad      	uxthmi	r5, r5
 80010c8:	6031      	str	r1, [r6, #0]
 80010ca:	07d9      	lsls	r1, r3, #31
 80010cc:	bf44      	itt	mi
 80010ce:	f043 0320 	orrmi.w	r3, r3, #32
 80010d2:	6023      	strmi	r3, [r4, #0]
 80010d4:	b11d      	cbz	r5, 80010de <_printf_i+0x19e>
 80010d6:	2310      	movs	r3, #16
 80010d8:	e7ac      	b.n	8001034 <_printf_i+0xf4>
 80010da:	4827      	ldr	r0, [pc, #156]	@ (8001178 <_printf_i+0x238>)
 80010dc:	e7e9      	b.n	80010b2 <_printf_i+0x172>
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	f023 0320 	bic.w	r3, r3, #32
 80010e4:	6023      	str	r3, [r4, #0]
 80010e6:	e7f6      	b.n	80010d6 <_printf_i+0x196>
 80010e8:	4616      	mov	r6, r2
 80010ea:	e7bd      	b.n	8001068 <_printf_i+0x128>
 80010ec:	6833      	ldr	r3, [r6, #0]
 80010ee:	6825      	ldr	r5, [r4, #0]
 80010f0:	6961      	ldr	r1, [r4, #20]
 80010f2:	1d18      	adds	r0, r3, #4
 80010f4:	6030      	str	r0, [r6, #0]
 80010f6:	062e      	lsls	r6, r5, #24
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	d501      	bpl.n	8001100 <_printf_i+0x1c0>
 80010fc:	6019      	str	r1, [r3, #0]
 80010fe:	e002      	b.n	8001106 <_printf_i+0x1c6>
 8001100:	0668      	lsls	r0, r5, #25
 8001102:	d5fb      	bpl.n	80010fc <_printf_i+0x1bc>
 8001104:	8019      	strh	r1, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	6123      	str	r3, [r4, #16]
 800110a:	4616      	mov	r6, r2
 800110c:	e7bc      	b.n	8001088 <_printf_i+0x148>
 800110e:	6833      	ldr	r3, [r6, #0]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	6032      	str	r2, [r6, #0]
 8001114:	681e      	ldr	r6, [r3, #0]
 8001116:	6862      	ldr	r2, [r4, #4]
 8001118:	2100      	movs	r1, #0
 800111a:	4630      	mov	r0, r6
 800111c:	f7ff f878 	bl	8000210 <memchr>
 8001120:	b108      	cbz	r0, 8001126 <_printf_i+0x1e6>
 8001122:	1b80      	subs	r0, r0, r6
 8001124:	6060      	str	r0, [r4, #4]
 8001126:	6863      	ldr	r3, [r4, #4]
 8001128:	6123      	str	r3, [r4, #16]
 800112a:	2300      	movs	r3, #0
 800112c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001130:	e7aa      	b.n	8001088 <_printf_i+0x148>
 8001132:	6923      	ldr	r3, [r4, #16]
 8001134:	4632      	mov	r2, r6
 8001136:	4649      	mov	r1, r9
 8001138:	4640      	mov	r0, r8
 800113a:	47d0      	blx	sl
 800113c:	3001      	adds	r0, #1
 800113e:	d0ad      	beq.n	800109c <_printf_i+0x15c>
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	079b      	lsls	r3, r3, #30
 8001144:	d413      	bmi.n	800116e <_printf_i+0x22e>
 8001146:	68e0      	ldr	r0, [r4, #12]
 8001148:	9b03      	ldr	r3, [sp, #12]
 800114a:	4298      	cmp	r0, r3
 800114c:	bfb8      	it	lt
 800114e:	4618      	movlt	r0, r3
 8001150:	e7a6      	b.n	80010a0 <_printf_i+0x160>
 8001152:	2301      	movs	r3, #1
 8001154:	4632      	mov	r2, r6
 8001156:	4649      	mov	r1, r9
 8001158:	4640      	mov	r0, r8
 800115a:	47d0      	blx	sl
 800115c:	3001      	adds	r0, #1
 800115e:	d09d      	beq.n	800109c <_printf_i+0x15c>
 8001160:	3501      	adds	r5, #1
 8001162:	68e3      	ldr	r3, [r4, #12]
 8001164:	9903      	ldr	r1, [sp, #12]
 8001166:	1a5b      	subs	r3, r3, r1
 8001168:	42ab      	cmp	r3, r5
 800116a:	dcf2      	bgt.n	8001152 <_printf_i+0x212>
 800116c:	e7eb      	b.n	8001146 <_printf_i+0x206>
 800116e:	2500      	movs	r5, #0
 8001170:	f104 0619 	add.w	r6, r4, #25
 8001174:	e7f5      	b.n	8001162 <_printf_i+0x222>
 8001176:	bf00      	nop
 8001178:	08001565 	.word	0x08001565
 800117c:	08001576 	.word	0x08001576

08001180 <__sflush_r>:
 8001180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001188:	0716      	lsls	r6, r2, #28
 800118a:	4605      	mov	r5, r0
 800118c:	460c      	mov	r4, r1
 800118e:	d454      	bmi.n	800123a <__sflush_r+0xba>
 8001190:	684b      	ldr	r3, [r1, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	dc02      	bgt.n	800119c <__sflush_r+0x1c>
 8001196:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001198:	2b00      	cmp	r3, #0
 800119a:	dd48      	ble.n	800122e <__sflush_r+0xae>
 800119c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800119e:	2e00      	cmp	r6, #0
 80011a0:	d045      	beq.n	800122e <__sflush_r+0xae>
 80011a2:	2300      	movs	r3, #0
 80011a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011a8:	682f      	ldr	r7, [r5, #0]
 80011aa:	6a21      	ldr	r1, [r4, #32]
 80011ac:	602b      	str	r3, [r5, #0]
 80011ae:	d030      	beq.n	8001212 <__sflush_r+0x92>
 80011b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011b2:	89a3      	ldrh	r3, [r4, #12]
 80011b4:	0759      	lsls	r1, r3, #29
 80011b6:	d505      	bpl.n	80011c4 <__sflush_r+0x44>
 80011b8:	6863      	ldr	r3, [r4, #4]
 80011ba:	1ad2      	subs	r2, r2, r3
 80011bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011be:	b10b      	cbz	r3, 80011c4 <__sflush_r+0x44>
 80011c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011c2:	1ad2      	subs	r2, r2, r3
 80011c4:	2300      	movs	r3, #0
 80011c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011c8:	6a21      	ldr	r1, [r4, #32]
 80011ca:	4628      	mov	r0, r5
 80011cc:	47b0      	blx	r6
 80011ce:	1c43      	adds	r3, r0, #1
 80011d0:	89a3      	ldrh	r3, [r4, #12]
 80011d2:	d106      	bne.n	80011e2 <__sflush_r+0x62>
 80011d4:	6829      	ldr	r1, [r5, #0]
 80011d6:	291d      	cmp	r1, #29
 80011d8:	d82b      	bhi.n	8001232 <__sflush_r+0xb2>
 80011da:	4a2a      	ldr	r2, [pc, #168]	@ (8001284 <__sflush_r+0x104>)
 80011dc:	410a      	asrs	r2, r1
 80011de:	07d6      	lsls	r6, r2, #31
 80011e0:	d427      	bmi.n	8001232 <__sflush_r+0xb2>
 80011e2:	2200      	movs	r2, #0
 80011e4:	6062      	str	r2, [r4, #4]
 80011e6:	04d9      	lsls	r1, r3, #19
 80011e8:	6922      	ldr	r2, [r4, #16]
 80011ea:	6022      	str	r2, [r4, #0]
 80011ec:	d504      	bpl.n	80011f8 <__sflush_r+0x78>
 80011ee:	1c42      	adds	r2, r0, #1
 80011f0:	d101      	bne.n	80011f6 <__sflush_r+0x76>
 80011f2:	682b      	ldr	r3, [r5, #0]
 80011f4:	b903      	cbnz	r3, 80011f8 <__sflush_r+0x78>
 80011f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80011f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011fa:	602f      	str	r7, [r5, #0]
 80011fc:	b1b9      	cbz	r1, 800122e <__sflush_r+0xae>
 80011fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001202:	4299      	cmp	r1, r3
 8001204:	d002      	beq.n	800120c <__sflush_r+0x8c>
 8001206:	4628      	mov	r0, r5
 8001208:	f7ff fbf2 	bl	80009f0 <_free_r>
 800120c:	2300      	movs	r3, #0
 800120e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001210:	e00d      	b.n	800122e <__sflush_r+0xae>
 8001212:	2301      	movs	r3, #1
 8001214:	4628      	mov	r0, r5
 8001216:	47b0      	blx	r6
 8001218:	4602      	mov	r2, r0
 800121a:	1c50      	adds	r0, r2, #1
 800121c:	d1c9      	bne.n	80011b2 <__sflush_r+0x32>
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0c6      	beq.n	80011b2 <__sflush_r+0x32>
 8001224:	2b1d      	cmp	r3, #29
 8001226:	d001      	beq.n	800122c <__sflush_r+0xac>
 8001228:	2b16      	cmp	r3, #22
 800122a:	d11e      	bne.n	800126a <__sflush_r+0xea>
 800122c:	602f      	str	r7, [r5, #0]
 800122e:	2000      	movs	r0, #0
 8001230:	e022      	b.n	8001278 <__sflush_r+0xf8>
 8001232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001236:	b21b      	sxth	r3, r3
 8001238:	e01b      	b.n	8001272 <__sflush_r+0xf2>
 800123a:	690f      	ldr	r7, [r1, #16]
 800123c:	2f00      	cmp	r7, #0
 800123e:	d0f6      	beq.n	800122e <__sflush_r+0xae>
 8001240:	0793      	lsls	r3, r2, #30
 8001242:	680e      	ldr	r6, [r1, #0]
 8001244:	bf08      	it	eq
 8001246:	694b      	ldreq	r3, [r1, #20]
 8001248:	600f      	str	r7, [r1, #0]
 800124a:	bf18      	it	ne
 800124c:	2300      	movne	r3, #0
 800124e:	eba6 0807 	sub.w	r8, r6, r7
 8001252:	608b      	str	r3, [r1, #8]
 8001254:	f1b8 0f00 	cmp.w	r8, #0
 8001258:	dde9      	ble.n	800122e <__sflush_r+0xae>
 800125a:	6a21      	ldr	r1, [r4, #32]
 800125c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800125e:	4643      	mov	r3, r8
 8001260:	463a      	mov	r2, r7
 8001262:	4628      	mov	r0, r5
 8001264:	47b0      	blx	r6
 8001266:	2800      	cmp	r0, #0
 8001268:	dc08      	bgt.n	800127c <__sflush_r+0xfc>
 800126a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800126e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001272:	81a3      	strh	r3, [r4, #12]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800127c:	4407      	add	r7, r0
 800127e:	eba8 0800 	sub.w	r8, r8, r0
 8001282:	e7e7      	b.n	8001254 <__sflush_r+0xd4>
 8001284:	dfbffffe 	.word	0xdfbffffe

08001288 <_fflush_r>:
 8001288:	b538      	push	{r3, r4, r5, lr}
 800128a:	690b      	ldr	r3, [r1, #16]
 800128c:	4605      	mov	r5, r0
 800128e:	460c      	mov	r4, r1
 8001290:	b913      	cbnz	r3, 8001298 <_fflush_r+0x10>
 8001292:	2500      	movs	r5, #0
 8001294:	4628      	mov	r0, r5
 8001296:	bd38      	pop	{r3, r4, r5, pc}
 8001298:	b118      	cbz	r0, 80012a2 <_fflush_r+0x1a>
 800129a:	6a03      	ldr	r3, [r0, #32]
 800129c:	b90b      	cbnz	r3, 80012a2 <_fflush_r+0x1a>
 800129e:	f7ff fa9f 	bl	80007e0 <__sinit>
 80012a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f3      	beq.n	8001292 <_fflush_r+0xa>
 80012aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012ac:	07d0      	lsls	r0, r2, #31
 80012ae:	d404      	bmi.n	80012ba <_fflush_r+0x32>
 80012b0:	0599      	lsls	r1, r3, #22
 80012b2:	d402      	bmi.n	80012ba <_fflush_r+0x32>
 80012b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012b6:	f7ff fb98 	bl	80009ea <__retarget_lock_acquire_recursive>
 80012ba:	4628      	mov	r0, r5
 80012bc:	4621      	mov	r1, r4
 80012be:	f7ff ff5f 	bl	8001180 <__sflush_r>
 80012c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012c4:	07da      	lsls	r2, r3, #31
 80012c6:	4605      	mov	r5, r0
 80012c8:	d4e4      	bmi.n	8001294 <_fflush_r+0xc>
 80012ca:	89a3      	ldrh	r3, [r4, #12]
 80012cc:	059b      	lsls	r3, r3, #22
 80012ce:	d4e1      	bmi.n	8001294 <_fflush_r+0xc>
 80012d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012d2:	f7ff fb8b 	bl	80009ec <__retarget_lock_release_recursive>
 80012d6:	e7dd      	b.n	8001294 <_fflush_r+0xc>

080012d8 <__swbuf_r>:
 80012d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012da:	460e      	mov	r6, r1
 80012dc:	4614      	mov	r4, r2
 80012de:	4605      	mov	r5, r0
 80012e0:	b118      	cbz	r0, 80012ea <__swbuf_r+0x12>
 80012e2:	6a03      	ldr	r3, [r0, #32]
 80012e4:	b90b      	cbnz	r3, 80012ea <__swbuf_r+0x12>
 80012e6:	f7ff fa7b 	bl	80007e0 <__sinit>
 80012ea:	69a3      	ldr	r3, [r4, #24]
 80012ec:	60a3      	str	r3, [r4, #8]
 80012ee:	89a3      	ldrh	r3, [r4, #12]
 80012f0:	071a      	lsls	r2, r3, #28
 80012f2:	d501      	bpl.n	80012f8 <__swbuf_r+0x20>
 80012f4:	6923      	ldr	r3, [r4, #16]
 80012f6:	b943      	cbnz	r3, 800130a <__swbuf_r+0x32>
 80012f8:	4621      	mov	r1, r4
 80012fa:	4628      	mov	r0, r5
 80012fc:	f000 f82a 	bl	8001354 <__swsetup_r>
 8001300:	b118      	cbz	r0, 800130a <__swbuf_r+0x32>
 8001302:	f04f 37ff 	mov.w	r7, #4294967295
 8001306:	4638      	mov	r0, r7
 8001308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	6922      	ldr	r2, [r4, #16]
 800130e:	1a98      	subs	r0, r3, r2
 8001310:	6963      	ldr	r3, [r4, #20]
 8001312:	b2f6      	uxtb	r6, r6
 8001314:	4283      	cmp	r3, r0
 8001316:	4637      	mov	r7, r6
 8001318:	dc05      	bgt.n	8001326 <__swbuf_r+0x4e>
 800131a:	4621      	mov	r1, r4
 800131c:	4628      	mov	r0, r5
 800131e:	f7ff ffb3 	bl	8001288 <_fflush_r>
 8001322:	2800      	cmp	r0, #0
 8001324:	d1ed      	bne.n	8001302 <__swbuf_r+0x2a>
 8001326:	68a3      	ldr	r3, [r4, #8]
 8001328:	3b01      	subs	r3, #1
 800132a:	60a3      	str	r3, [r4, #8]
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	6022      	str	r2, [r4, #0]
 8001332:	701e      	strb	r6, [r3, #0]
 8001334:	6962      	ldr	r2, [r4, #20]
 8001336:	1c43      	adds	r3, r0, #1
 8001338:	429a      	cmp	r2, r3
 800133a:	d004      	beq.n	8001346 <__swbuf_r+0x6e>
 800133c:	89a3      	ldrh	r3, [r4, #12]
 800133e:	07db      	lsls	r3, r3, #31
 8001340:	d5e1      	bpl.n	8001306 <__swbuf_r+0x2e>
 8001342:	2e0a      	cmp	r6, #10
 8001344:	d1df      	bne.n	8001306 <__swbuf_r+0x2e>
 8001346:	4621      	mov	r1, r4
 8001348:	4628      	mov	r0, r5
 800134a:	f7ff ff9d 	bl	8001288 <_fflush_r>
 800134e:	2800      	cmp	r0, #0
 8001350:	d0d9      	beq.n	8001306 <__swbuf_r+0x2e>
 8001352:	e7d6      	b.n	8001302 <__swbuf_r+0x2a>

08001354 <__swsetup_r>:
 8001354:	b538      	push	{r3, r4, r5, lr}
 8001356:	4b29      	ldr	r3, [pc, #164]	@ (80013fc <__swsetup_r+0xa8>)
 8001358:	4605      	mov	r5, r0
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	460c      	mov	r4, r1
 800135e:	b118      	cbz	r0, 8001368 <__swsetup_r+0x14>
 8001360:	6a03      	ldr	r3, [r0, #32]
 8001362:	b90b      	cbnz	r3, 8001368 <__swsetup_r+0x14>
 8001364:	f7ff fa3c 	bl	80007e0 <__sinit>
 8001368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800136c:	0719      	lsls	r1, r3, #28
 800136e:	d422      	bmi.n	80013b6 <__swsetup_r+0x62>
 8001370:	06da      	lsls	r2, r3, #27
 8001372:	d407      	bmi.n	8001384 <__swsetup_r+0x30>
 8001374:	2209      	movs	r2, #9
 8001376:	602a      	str	r2, [r5, #0]
 8001378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800137c:	81a3      	strh	r3, [r4, #12]
 800137e:	f04f 30ff 	mov.w	r0, #4294967295
 8001382:	e033      	b.n	80013ec <__swsetup_r+0x98>
 8001384:	0758      	lsls	r0, r3, #29
 8001386:	d512      	bpl.n	80013ae <__swsetup_r+0x5a>
 8001388:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800138a:	b141      	cbz	r1, 800139e <__swsetup_r+0x4a>
 800138c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001390:	4299      	cmp	r1, r3
 8001392:	d002      	beq.n	800139a <__swsetup_r+0x46>
 8001394:	4628      	mov	r0, r5
 8001396:	f7ff fb2b 	bl	80009f0 <_free_r>
 800139a:	2300      	movs	r3, #0
 800139c:	6363      	str	r3, [r4, #52]	@ 0x34
 800139e:	89a3      	ldrh	r3, [r4, #12]
 80013a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013a4:	81a3      	strh	r3, [r4, #12]
 80013a6:	2300      	movs	r3, #0
 80013a8:	6063      	str	r3, [r4, #4]
 80013aa:	6923      	ldr	r3, [r4, #16]
 80013ac:	6023      	str	r3, [r4, #0]
 80013ae:	89a3      	ldrh	r3, [r4, #12]
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	81a3      	strh	r3, [r4, #12]
 80013b6:	6923      	ldr	r3, [r4, #16]
 80013b8:	b94b      	cbnz	r3, 80013ce <__swsetup_r+0x7a>
 80013ba:	89a3      	ldrh	r3, [r4, #12]
 80013bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013c4:	d003      	beq.n	80013ce <__swsetup_r+0x7a>
 80013c6:	4621      	mov	r1, r4
 80013c8:	4628      	mov	r0, r5
 80013ca:	f000 f84f 	bl	800146c <__smakebuf_r>
 80013ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013d2:	f013 0201 	ands.w	r2, r3, #1
 80013d6:	d00a      	beq.n	80013ee <__swsetup_r+0x9a>
 80013d8:	2200      	movs	r2, #0
 80013da:	60a2      	str	r2, [r4, #8]
 80013dc:	6962      	ldr	r2, [r4, #20]
 80013de:	4252      	negs	r2, r2
 80013e0:	61a2      	str	r2, [r4, #24]
 80013e2:	6922      	ldr	r2, [r4, #16]
 80013e4:	b942      	cbnz	r2, 80013f8 <__swsetup_r+0xa4>
 80013e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013ea:	d1c5      	bne.n	8001378 <__swsetup_r+0x24>
 80013ec:	bd38      	pop	{r3, r4, r5, pc}
 80013ee:	0799      	lsls	r1, r3, #30
 80013f0:	bf58      	it	pl
 80013f2:	6962      	ldrpl	r2, [r4, #20]
 80013f4:	60a2      	str	r2, [r4, #8]
 80013f6:	e7f4      	b.n	80013e2 <__swsetup_r+0x8e>
 80013f8:	2000      	movs	r0, #0
 80013fa:	e7f7      	b.n	80013ec <__swsetup_r+0x98>
 80013fc:	2000000c 	.word	0x2000000c

08001400 <_sbrk_r>:
 8001400:	b538      	push	{r3, r4, r5, lr}
 8001402:	4d06      	ldr	r5, [pc, #24]	@ (800141c <_sbrk_r+0x1c>)
 8001404:	2300      	movs	r3, #0
 8001406:	4604      	mov	r4, r0
 8001408:	4608      	mov	r0, r1
 800140a:	602b      	str	r3, [r5, #0]
 800140c:	f7fe fffa 	bl	8000404 <_sbrk>
 8001410:	1c43      	adds	r3, r0, #1
 8001412:	d102      	bne.n	800141a <_sbrk_r+0x1a>
 8001414:	682b      	ldr	r3, [r5, #0]
 8001416:	b103      	cbz	r3, 800141a <_sbrk_r+0x1a>
 8001418:	6023      	str	r3, [r4, #0]
 800141a:	bd38      	pop	{r3, r4, r5, pc}
 800141c:	200001c0 	.word	0x200001c0

08001420 <__swhatbuf_r>:
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	460c      	mov	r4, r1
 8001424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001428:	2900      	cmp	r1, #0
 800142a:	b096      	sub	sp, #88	@ 0x58
 800142c:	4615      	mov	r5, r2
 800142e:	461e      	mov	r6, r3
 8001430:	da0d      	bge.n	800144e <__swhatbuf_r+0x2e>
 8001432:	89a3      	ldrh	r3, [r4, #12]
 8001434:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001438:	f04f 0100 	mov.w	r1, #0
 800143c:	bf14      	ite	ne
 800143e:	2340      	movne	r3, #64	@ 0x40
 8001440:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001444:	2000      	movs	r0, #0
 8001446:	6031      	str	r1, [r6, #0]
 8001448:	602b      	str	r3, [r5, #0]
 800144a:	b016      	add	sp, #88	@ 0x58
 800144c:	bd70      	pop	{r4, r5, r6, pc}
 800144e:	466a      	mov	r2, sp
 8001450:	f000 f848 	bl	80014e4 <_fstat_r>
 8001454:	2800      	cmp	r0, #0
 8001456:	dbec      	blt.n	8001432 <__swhatbuf_r+0x12>
 8001458:	9901      	ldr	r1, [sp, #4]
 800145a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800145e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001462:	4259      	negs	r1, r3
 8001464:	4159      	adcs	r1, r3
 8001466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146a:	e7eb      	b.n	8001444 <__swhatbuf_r+0x24>

0800146c <__smakebuf_r>:
 800146c:	898b      	ldrh	r3, [r1, #12]
 800146e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001470:	079d      	lsls	r5, r3, #30
 8001472:	4606      	mov	r6, r0
 8001474:	460c      	mov	r4, r1
 8001476:	d507      	bpl.n	8001488 <__smakebuf_r+0x1c>
 8001478:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800147c:	6023      	str	r3, [r4, #0]
 800147e:	6123      	str	r3, [r4, #16]
 8001480:	2301      	movs	r3, #1
 8001482:	6163      	str	r3, [r4, #20]
 8001484:	b003      	add	sp, #12
 8001486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001488:	ab01      	add	r3, sp, #4
 800148a:	466a      	mov	r2, sp
 800148c:	f7ff ffc8 	bl	8001420 <__swhatbuf_r>
 8001490:	9f00      	ldr	r7, [sp, #0]
 8001492:	4605      	mov	r5, r0
 8001494:	4639      	mov	r1, r7
 8001496:	4630      	mov	r0, r6
 8001498:	f7ff fb16 	bl	8000ac8 <_malloc_r>
 800149c:	b948      	cbnz	r0, 80014b2 <__smakebuf_r+0x46>
 800149e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014a2:	059a      	lsls	r2, r3, #22
 80014a4:	d4ee      	bmi.n	8001484 <__smakebuf_r+0x18>
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	81a3      	strh	r3, [r4, #12]
 80014b0:	e7e2      	b.n	8001478 <__smakebuf_r+0xc>
 80014b2:	89a3      	ldrh	r3, [r4, #12]
 80014b4:	6020      	str	r0, [r4, #0]
 80014b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ba:	81a3      	strh	r3, [r4, #12]
 80014bc:	9b01      	ldr	r3, [sp, #4]
 80014be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014c2:	b15b      	cbz	r3, 80014dc <__smakebuf_r+0x70>
 80014c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014c8:	4630      	mov	r0, r6
 80014ca:	f000 f81d 	bl	8001508 <_isatty_r>
 80014ce:	b128      	cbz	r0, 80014dc <__smakebuf_r+0x70>
 80014d0:	89a3      	ldrh	r3, [r4, #12]
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	81a3      	strh	r3, [r4, #12]
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	431d      	orrs	r5, r3
 80014e0:	81a5      	strh	r5, [r4, #12]
 80014e2:	e7cf      	b.n	8001484 <__smakebuf_r+0x18>

080014e4 <_fstat_r>:
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4d07      	ldr	r5, [pc, #28]	@ (8001504 <_fstat_r+0x20>)
 80014e8:	2300      	movs	r3, #0
 80014ea:	4604      	mov	r4, r0
 80014ec:	4608      	mov	r0, r1
 80014ee:	4611      	mov	r1, r2
 80014f0:	602b      	str	r3, [r5, #0]
 80014f2:	f7fe ff5e 	bl	80003b2 <_fstat>
 80014f6:	1c43      	adds	r3, r0, #1
 80014f8:	d102      	bne.n	8001500 <_fstat_r+0x1c>
 80014fa:	682b      	ldr	r3, [r5, #0]
 80014fc:	b103      	cbz	r3, 8001500 <_fstat_r+0x1c>
 80014fe:	6023      	str	r3, [r4, #0]
 8001500:	bd38      	pop	{r3, r4, r5, pc}
 8001502:	bf00      	nop
 8001504:	200001c0 	.word	0x200001c0

08001508 <_isatty_r>:
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4d06      	ldr	r5, [pc, #24]	@ (8001524 <_isatty_r+0x1c>)
 800150c:	2300      	movs	r3, #0
 800150e:	4604      	mov	r4, r0
 8001510:	4608      	mov	r0, r1
 8001512:	602b      	str	r3, [r5, #0]
 8001514:	f7fe ff5d 	bl	80003d2 <_isatty>
 8001518:	1c43      	adds	r3, r0, #1
 800151a:	d102      	bne.n	8001522 <_isatty_r+0x1a>
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	b103      	cbz	r3, 8001522 <_isatty_r+0x1a>
 8001520:	6023      	str	r3, [r4, #0]
 8001522:	bd38      	pop	{r3, r4, r5, pc}
 8001524:	200001c0 	.word	0x200001c0

08001528 <_init>:
 8001528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152a:	bf00      	nop
 800152c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152e:	bc08      	pop	{r3}
 8001530:	469e      	mov	lr, r3
 8001532:	4770      	bx	lr

08001534 <_fini>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	bf00      	nop
 8001538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153a:	bc08      	pop	{r3}
 800153c:	469e      	mov	lr, r3
 800153e:	4770      	bx	lr
